// Generated by CoffeeScript 1.6.1
define("/assets/dist/guide/guide-debug", [ "./view-debug", "jquery-debug", "hammer-debug", "mustache-debug", "backbone-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, View, view;
    $ = require("jquery-debug");
    $("body").append('<div id="app-guide"></div>');
    View = require("./view-debug");
    view = new View();
    if (!localStorage.showAppGuide) {
        view.render();
        return localStorage.showAppGuide = "true";
    } else {
        return $("#app-guide").remove();
    }
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/guide/view-debug", [ "hammer-debug", "mustache-debug", "backbone-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, iScroll;
    $ = require("hammer-debug");
    Mustache = require("mustache-debug");
    Backbone = require("backbone-debug");
    iScroll = require("iscroll-debug").iScroll;
    return module.exports = Backbone.View.extend({
        tpl: '<div id="scroller-guide-slide"><ul class="slide"><li class="guide-first">\n<div class="guide-des">在寝室 <span>&nbsp;</span>教室 <span>&nbsp;</span>或者图书馆</div>\n<div class="guide-des guide-des-right">如果你喜欢宅着</div>\n</li><li class="guide-second">\n<div class="guide-des">又无需面对繁琐的选择</div>\n<div class="guide-des guide-des-right">如果你期望饭来张口</div>\n</li><li class="guide-third">\n<div class="guide-des">能够瞬间到达你的手中</div>\n<div class="guide-des guide-des-right">如果你渴望的美味</div>\n</li><li class="guide-last">\n<div class="guide-des">让这一切不再是奢想</div>\n<div class="guide-des guide-des-right">打开水果巴士</div>\n<div class="get-in">向左滑动&nbsp;进入应用<i class="icon-angle-right"></i></div>\n</li><li class="blank" style="position: relative; height: 100%;"></li></ul></div><ul class="guide-slide-page">\n{{#slide_page}}\n<li>\n<span>\n<i class="icon-circle"></i>\n</span>\n</li>\n{{/slide_page}}\n</ul>',
        el: "#app-guide",
        initialize: function() {},
        render: function() {
            var slide_page;
            slide_page = [ 0, 1, 2, 3 ];
            this.$el.html(Mustache.render(this.tpl, {
                slide_page: slide_page
            }));
            return $(function() {
                var guide_scroll, page_list;
                page_list = $("#app-guide .guide-slide-page li");
                page_list.eq(0).addClass("active");
                return guide_scroll = new iScroll("app-guide", {
                    checkDOMChanges: true,
                    snap: true,
                    momentum: false,
                    hScrollbar: false,
                    onScrollEnd: function() {
                        page_list.removeClass("active");
                        page_list.eq(this.currPageX).addClass("active");
                        if (this.currPageX === 0) {
                            $("#app-guide").removeClass("transparent");
                        } else {
                            $("#app-guide").addClass("transparent");
                        }
                        if (this.currPageX === 4) {
                            return $("#app-guide").remove();
                        }
                    }
                });
            });
        }
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/layout/layout-debug", [ "./nav/nav-debug", "../stateMachine/nav-debug", "./main/main-debug", "../plugin/imgLoad/imgLoad-debug", "hammer-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var layout, main, nav;
    nav = require("./nav/nav-debug");
    main = require("./main/main-debug");
    layout = function(option) {
        if (option) {
            return nav(option);
        } else {
            return nav({
                type: "main"
            });
        }
    };
    return module.exports = layout;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/layout/nav/nav-debug", [ "../../stateMachine/nav-debug", "hammer-debug", "util-debug" ], function(require, exports, module) {
    var $, nav, stateMachine, tpl;
    $ = require("hammer-debug");
    stateMachine = require("../../stateMachine/nav-debug");
    tpl = '<div id="nav"><div class="location"><div class="back">\n<i class="icon-angle-left"></i>\n</div><div class="position"></div></div><div class="main">\n<a href="#" id="logo"></a>\n</div><a id="cart-button" href="#buy/cart/read">\n<span class="num">\n<span style="color:#FFF;">0</span>\n</span>\n</a>\n</div></div><div id="nav-sub"><ul><li class="active">\n<a href="#commodity/hot">热销</a>\n</li><li>\n<a href="#commodity/cat">分类</a>\n</li><li>\n<a href="#user/info">账户</a>\n</li></ul></div>';
    $(document.body).prepend(tpl);
    $("#nav .location .back").hammer().on("tap", function() {
        return history.back();
    });
    nav = function(option) {
        var hash;
        stateMachine[option.type].active();
        switch (option.type) {
          case "main":
            hash = location.hash;
            $("#nav-sub .active").removeClass("active");
            $("#nav-sub a").each(function() {
                var me;
                me = $(this);
                if (me.attr("href") === hash) {
                    return me.parent().addClass("active");
                }
            });
            if (hash === "#user/entrance") {
                return $("#nav-sub ul li").eq(2).addClass("active");
            }
            break;

          case "location":
            return $("#nav .location .position").html(option.position);
        }
    };
    return module.exports = nav;
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/stateMachine/nav-debug", [ "util-debug" ], function(require, exports, module) {
        var Util, location, main, stateMachine;
        Util = require("util-debug");
        stateMachine = new Util.StateMachine();
        main = {
            activate: function() {
                $("#nav .main").fadeIn("fast");
                $("#nav-sub").fadeIn("fast");
                return $("#wrapper").addClass("main");
            },
            deactivate: function() {
                $("#nav .main").hide();
                $("#nav-sub").hide();
                return $("#wrapper").removeClass("main");
            }
        };
        location = {
            activate: function() {
                return $("#nav .location").fadeIn("fast");
            },
            deactivate: function() {
                return $("#nav .location").hide("fast");
            }
        };
        stateMachine.add(main);
        stateMachine.add(location);
        return module.exports = {
            main: main,
            location: location
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
define("/assets/dist/layout/main/main-debug", [ "../../plugin/imgLoad/imgLoad-debug", "jquery-debug", "iscroll-debug", "hammer-debug" ], function(require, exports, module) {
    var $, iScroll, imgLoad, main_scroll, tpl;
    $ = require("jquery-debug");
    iScroll = require("iscroll-debug").iScroll;
    tpl = '<div id="wrapper">\n<div id="scroller">\n<!--\n<div id="pullDown">\n<span class="pullDownIcon"></span><span class="pullDownLabel">Pull down to refresh...</span>\n</div>\n-->\n<div class="content">\n</div></div>\n</div>';
    $(document.body).append(tpl);
    document.addEventListener("touchmove", function(event) {
        return event.preventDefault();
    }, false);
    document.addEventListener("touchstart", function(event) {
        var target;
        target = event.target;
        if (target.tagName !== "SELECT" && target.tagName !== "INPUT" && target.tagName !== "TEXTAREA") {
            event.preventDefault();
            return event.stopPropagation();
        }
    }, false);
    imgLoad = require("../../plugin/imgLoad/imgLoad-debug");
    main_scroll = new iScroll("wrapper", {
        checkDOMChanges: true,
        hScrollbar: false,
        useTransform: false,
        onRefresh: imgLoad,
        onBeforeScrollStart: function(event) {
            var target;
            target = event.target;
            while (target.nodeType !== 1) {
                target = target.parentNode;
            }
            if (target.tagName !== "SELECT" && target.tagName !== "INPUT" && target.tagName !== "TEXTAREA") {
                event.preventDefault();
            }
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = setTimeout(function() {
                if (!$(target).hasClass("ui-hover")) {
                    $(target).addClass("ui-hover");
                    return $(target).parents("li").addClass("ui-hover");
                } else if ($(target)[0].tagName === "A") {
                    $(target).addClass("ui-hover");
                    return $(target).parents("li").addClass("ui-hover");
                }
            }, 10);
            return this.hoverTarget = target;
        },
        onScrollMove: function() {
            $(this.hoverTarget).removeClass("ui-hover");
            return $(this.hoverTarget).parents("li").removeClass("ui-hover");
        },
        onBeforeScrollEnd: function() {
            $(this.hoverTarget).removeClass("ui-hover");
            return $(this.hoverTarget).parents("li").removeClass("ui-hover");
        }
    });
    return module.exports = main_scroll;
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/plugin/imgLoad/imgLoad-debug", [ "hammer-debug" ], function(require, exports, module) {
        var $, init_num, load, max_top, screen_height;
        $ = require("hammer-debug");
        screen_height = window.innerHeight;
        max_top = screen_height;
        init_num = 6;
        load = function() {
            if ($("img[real-src]:visible").size() === 0) {
                return false;
            }
            return $("img[real-src]:visible").each(function() {
                if (this.y <= max_top) {
                    $(this).attr({
                        src: $(this).attr("real-src")
                    });
                    return $(this).removeAttr("real-src");
                }
            });
        };
        $(window).on("scroll", load);
        $("body").on("dragend", load);
        return module.exports = load;
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
define("/assets/dist/touch/touch-debug", [ "hammer-debug" ], function(require, exports, module) {
    var $;
    $ = require("hammer-debug");
    return $(function() {
        $("body").hammer().on("touch", "select", function(event) {
            if (!$("#hack-select-input")[0]) {
                return $(this).after('<input id="hack-select-input" style="opacity:0;width:1px;height:1px;position:absolute; z-index: -99;" name="" type="text" />');
            }
        });
        $("body").hammer().on("release", "select", function(event) {
            event.stopPropagation();
            $("#hack-select-input").focus().click();
            return $(this).click().focus();
        });
        $("body").hammer().on("release", "input", function(event) {
            event.stopPropagation();
            return $(this).click();
        });
        $("body").hammer().on("tap", "a", function(event) {
            var href;
            event.preventDefault();
            event.stopPropagation();
            href = $(this).attr("href");
            if (/^#/.test(href)) {
                location.href = href;
                return false;
            }
            if (location.hash !== href) {
                return location.hash = href;
            }
        });
        $("body").hammer().on("touch", "a", function(event) {
            event.preventDefault();
            event.stopPropagation();
            return $(this).addClass("ui-hover");
        });
        return $("body").hammer().on("release", "a", function(event) {
            return $(this).removeClass("ui-hover");
        });
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/plugin/ui/ui-debug", [ "./number/number-debug", "./radio/radio-debug", "hammer-debug" ], function(require, exports, module) {
    return module.exports = {
        number: require("./number/number-debug"),
        radio: require("./radio/radio-debug")
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/plugin/ui/number/number-debug", [ "hammer-debug" ], function(require, exports, module) {
    var $, invalid;
    $ = require("hammer-debug");
    invalid = function(num) {
        num = Math.abs(num);
        if (isNaN(num)) {
            num = 1;
        }
        return num;
    };
    $("body").on("tap", ".fruit-ui-number .minus", function() {
        var input, val;
        input = $(".fruit-ui-number .number-value");
        val = input.val();
        val = invalid(val);
        if (val === 1) {
            input.val(val);
            return false;
        }
        return input.val(val - 1);
    });
    return $("body").on("tap", ".fruit-ui-number .plus", function() {
        var input, val;
        input = $(".fruit-ui-number .number-value");
        val = input.val();
        val = invalid(val);
        return input.val(val + 1);
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/plugin/ui/radio/radio-debug", [ "hammer-debug" ], function(require, exports, module) {
    var $;
    $ = require("hammer-debug");
    return $("body").on("tap", ".fruit-ui-radio li", function() {
        var parent;
        parent = $(this).parents(".fruit-ui-radio");
        parent.find(".active").removeClass("active");
        return $(this).addClass("active").attr("tabindex", -1).focus();
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/commodity-debug", [ "./hot/hot-debug", "../stateMachine/main-debug", "../layout/layout-debug", "../layout/nav/nav-debug", "../stateMachine/nav-debug", "../layout/main/main-debug", "../plugin/imgLoad/imgLoad-debug", "./hot/slide/slide-debug", "./hot/slide/view-debug", "./hot/slide/model-debug", "../class/model-debug", "../serverApi-debug", "../http/http-debug", "../message/message-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "../cache/cache-debug", "./hot/list/list-debug", "./hot/list/view-debug", "../plugin/countdown/countdown-debug", "./hot/list/model-debug", "./cat/cat-debug", "./cat/view-debug", "./cat/model-debug", "./list/list-debug", "./list/view-debug", "../plugin/titleFit/titleFit-debug", "./list/model-debug", "./item/item-debug", "./item/view-debug", "../buy/cart/create/create-debug", "../buy/cart/create/model-debug", "./item/model-debug", "backbone-debug", "util-debug", "hammer-debug", "jquery-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var cat, hot, item, list;
    hot = require("./hot/hot-debug");
    cat = require("./cat/cat-debug");
    list = require("./list/list-debug");
    item = require("./item/item-debug");
    return module.exports = function(action, parameter) {
        switch (action) {
          case "hot":
            return hot();

          case "cat":
            return cat();

          case "list":
            return list(parameter);

          case "item":
            return item(parameter);

          default:
            return hot();
        }
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/hot/hot-debug", [ "../../stateMachine/main-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./slide/slide-debug", "./slide/view-debug", "./slide/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "./list/list-debug", "./list/view-debug", "../../plugin/countdown/countdown-debug", "./list/model-debug", "backbone-debug", "util-debug", "hammer-debug", "jquery-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var Backbone, layout, list, slide, stateMachine, tpl;
    Backbone = require("backbone-debug");
    stateMachine = require("../../stateMachine/main-debug");
    layout = require("../../layout/layout-debug");
    tpl = '<div id="hot-slide"></div>\n<div id="hot-list"></div>';
    $("#scroller .content").append(tpl);
    slide = require("./slide/slide-debug");
    list = require("./list/list-debug");
    return module.exports = function() {
        Backbone.Router.prototype.navigate("commodity/hot");
        slide.reload();
        list.reload();
        stateMachine.hot.active();
        return layout();
    };
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/stateMachine/main-debug", [ "util-debug" ], function(require, exports, module) {
        var Util, cat, createAddress, entrance, generateOrder, hot, info, item, list, login, orderDetail, orderList, pay, readAddressList, readCart, register, stateMachine, updateAddress, updateCart;
        Util = require("util-debug");
        stateMachine = new Util.StateMachine();
        hot = {
            activate: function() {
                $("#hot-slide").show();
                return $("#hot-list").show();
            },
            deactivate: function() {
                $("#hot-slide").hide();
                return $("#hot-list").hide();
            }
        };
        cat = {
            activate: function() {
                return $("#cat-ul").show();
            },
            deactivate: function() {
                return $("#cat-ul").hide();
            }
        };
        list = {
            activate: function() {
                return $("#list-ul").show();
            },
            deactivate: function() {
                return $("#list-ul").hide();
            }
        };
        item = {
            activate: function() {
                return $("#item-detail").show();
            },
            deactivate: function() {
                return $("#item-detail").hide();
            }
        };
        stateMachine.add(hot);
        stateMachine.add(cat);
        stateMachine.add(list);
        stateMachine.add(item);
        info = {
            activate: function() {
                return $("#user-info").show();
            },
            deactivate: function() {
                return $("#user-info").hide();
            }
        };
        login = {
            activate: function() {
                return $("#login").show();
            },
            deactivate: function() {
                return $("#login").hide();
            }
        };
        register = {
            activate: function() {
                return $("#register").show();
            },
            deactivate: function() {
                return $("#register").hide();
            }
        };
        entrance = {
            activate: function() {
                return $("#entrance").show();
            },
            deactivate: function() {
                return $("#entrance").hide();
            }
        };
        orderList = {
            activate: function() {
                return $("#orderList").show();
            },
            deactivate: function() {
                return $("#orderList").hide();
            }
        };
        orderDetail = {
            activate: function() {
                return $("#orderDetail").show();
            },
            deactivate: function() {
                return $("#orderDetail").hide();
            }
        };
        stateMachine.add(info);
        stateMachine.add(login);
        stateMachine.add(register);
        stateMachine.add(entrance);
        stateMachine.add(orderList);
        stateMachine.add(orderDetail);
        readAddressList = {
            activate: function() {
                return $("#read-address-list").show();
            },
            deactivate: function() {
                return $("#read-address-list").hide();
            }
        };
        createAddress = {
            activate: function() {
                return $("#create-address").show();
            },
            deactivate: function() {
                return $("#create-address").hide();
            }
        };
        updateAddress = {
            activate: function() {
                return $("#update-address").show();
            },
            deactivate: function() {
                return $("#update-address").hide();
            }
        };
        stateMachine.add(readAddressList);
        stateMachine.add(createAddress);
        stateMachine.add(updateAddress);
        readCart = {
            activate: function() {
                return $("#cart-read").show();
            },
            deactivate: function() {
                return $("#cart-read").hide();
            }
        };
        updateCart = {
            activate: function() {
                return $("#cart-update").show();
            },
            deactivate: function() {
                return $("#cart-update").hide();
            }
        };
        generateOrder = {
            activate: function() {
                return $("#generate-order").show();
            },
            deactivate: function() {
                return $("#generate-order").hide();
            }
        };
        pay = {
            activate: function() {
                return $("#buy-pay").show();
            },
            deactivate: function() {
                return $("#buy-pay").hide();
            }
        };
        stateMachine.add(readCart);
        stateMachine.add(updateCart);
        stateMachine.add(generateOrder);
        stateMachine.add(pay);
        return module.exports = {
            hot: hot,
            cat: cat,
            list: list,
            item: item,
            info: info,
            login: login,
            entrance: entrance,
            register: register,
            orderList: orderList,
            orderDetail: orderDetail,
            readAddressList: readAddressList,
            createAddress: createAddress,
            updateAddress: updateAddress,
            readCart: readCart,
            updateCart: updateCart,
            generateOrder: generateOrder,
            pay: pay
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/hot/slide/slide-debug", [ "./view-debug", "./model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "jquery-debug", "backbone-debug", "mustache-debug", "iscroll-debug", "underscore-debug", "hammer-debug" ], function(require, exports, module) {
    var Model, View, model, view;
    View = require("./view-debug");
    Model = require("./model-debug");
    model = new Model("hotSlide");
    view = new View(model);
    return module.exports = {
        stop: function() {
            return view.stop();
        },
        reload: function() {
            return view.reload();
        }
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/commodity/hot/slide/view-debug", [ "jquery-debug", "backbone-debug", "mustache-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, iScroll;
    $ = require("jquery-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    iScroll = require("iscroll-debug").iScroll;
    return module.exports = Backbone.View.extend({
        tpl: '<div id="scroller-hot-slide"><ul class="slide">\n{{#slide}}\n<li>\n<a href="{{href}}">\n<img src="{{src}}" alt="" />\n</a>\n</li>\n{{/slide}}\n</ul></div><ul class="slide-page">\n{{#slide_page}}\n<li>\n<span>\n<i class="icon-circle"></i>\n</span>\n</li>\n{{/slide_page}}\n</ul>',
        el: "#hot-slide",
        initialize: function(model) {
            this.model = model;
            return this.model.on("" + this.model.type + ":success", this.render, this);
        },
        reload: function() {
            return this.model.get();
        },
        render: function(respond) {
            var height, slide, slide_page, view, window_width, _i, _ref, _results;
            view = this;
            slide = respond;
            slide_page = function() {
                _results = [];
                for (var _i = 0, _ref = slide.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
                    _results.push(_i);
                }
                return _results;
            }.apply(this);
            this.$el.html(Mustache.render(this.tpl, {
                slide: slide,
                slide_page: slide_page
            }));
            window_width = window.innerWidth;
            height = window_width / (480 / 172);
            $("#hot-slide").css({
                height: height
            });
            $("#hot-slide #scroller-hot-slide").css({
                width: window_width * slide.length
            });
            $("#hot-slide ul.slide li").css({
                width: window_width,
                height: height
            });
            return $(function() {
                var page_list;
                page_list = $("#hot-slide .slide-page li");
                page_list.eq(0).addClass("active");
                return new iScroll("hot-slide", {
                    checkDOMChanges: true,
                    snap: true,
                    momentum: false,
                    hScrollbar: false,
                    onScrollEnd: function() {
                        page_list.removeClass("active");
                        return page_list.eq(this.currPageX).addClass("active");
                    }
                });
            });
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/commodity/hot/slide/model-debug", [ "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/class/model-debug", [ "../serverApi-debug", "../http/http-debug", "../message/message-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var API, Backbone, Cache, Model, http, _;
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    API = require("../serverApi-debug");
    http = require("../http/http-debug");
    Cache = require("../cache/cache-debug");
    Model = function() {
        function Model(type) {
            this.type = type;
            _.extend(this, Backbone.Events);
            this.cache = new Cache(API[this.type].url, API[this.type].expire);
            this.on("" + this.type + ":success", this.cache.set, this.cache);
        }
        Model.prototype.get = function() {
            var args, cache, data;
            args = Array.prototype.slice.call(arguments);
            data = {};
            API[this.type].key.forEach(function(el, index) {
                if (args[index]) {
                    return data[el] = args[index];
                }
            });
            cache = this.cache.get(data);
            if (cache) {
                this.trigger("" + this.type + ":success", cache, data, true);
                return false;
            }
            return http({
                url: API[this.type].url,
                data: data,
                caller: this,
                namespace: this.type,
                map: API[this.type].map
            });
        };
        Model.prototype.clearCache = function(request) {
            return this.cache.clear(request);
        };
        return Model;
    }();
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/serverApi-debug", [], function(require, exports, module) {
    var server_root;
    server_root = seajs.config.data.server_root;
    return module.exports = {
        hotSlide: {
            url: "" + server_root + "/mobile/cms/hotSilde",
            key: [ "" ],
            expire: 864e5,
            map: {
                link: "href",
                pic: "src"
            }
        },
        hotList: {
            url: "" + server_root + "/mobile/cms/indexList",
            key: [ "" ],
            expire: 12e4,
            map: {
                itemid: "id",
                itemname: "name",
                itemimg: "src",
                price: "price",
                volume: "sales",
                old_price: "old_price",
                begintime: "start_time",
                endtime: "end_time"
            }
        },
        cat: {
            url: "" + server_root + "/mobile/cms/categoryList",
            key: [ "" ],
            expire: 864e5,
            map: {
                catid: "id",
                catname: "name",
                image: "src",
                volume: "sales"
            }
        },
        list: {
            url: "" + server_root + "/mobile/cms/categoryItemList",
            key: [ "catid" ],
            expire: 864e5,
            map: {
                itemid: "id",
                itemname: "name",
                itemimg: "src",
                volume: "sales"
            }
        },
        item: {
            url: "" + server_root + "/mobile/cms/itemDetail",
            key: [ "itemid" ],
            expire: 18e4,
            map: {
                itemid: "id",
                itemimg: "src",
                itemname: "name",
                specification_list: "norm",
                spec: "norm_name",
                productid: "norm_id",
                volume: "sales",
                evaluate_good_rate: "comment",
                view: "hit",
                price: "price"
            }
        },
        userInfo: {
            url: "" + server_root + "/mobile/user/currentInfo",
            key: [],
            expire: 864e5,
            map: {
                uname: "username",
                uid: "uid",
                email: "email"
            }
        },
        login: {
            url: "" + server_root + "/mobile/user/login",
            key: [ "email", "password" ]
        },
        logout: {
            url: "" + server_root + "/mobile/user/logout",
            key: []
        },
        register: {
            url: "" + server_root + "/mobile/user/register",
            key: [ "email", "password", "repassword" ]
        },
        orderList: {
            url: "" + server_root + "/mobile/trade/order/list",
            key: [ "type" ],
            expire: 0,
            map: {
                tradeid: "tradeid",
                payment: "payment",
                reveiver_name: "reveiver",
                status: "status",
                totalfee: "totalfee",
                order: "order",
                addtime: "addtime",
                itemid: "itemid",
                itemimg: "itemimg",
                itemname: "itemname",
                orderid: "orderid"
            }
        },
        orderDetail: {
            url: "" + server_root + "/mobile/trade/order/detail",
            key: [ "tradeid" ],
            expire: 0,
            map: {
                order_list: "order_list",
                trade: "trade",
                tradeid: "tradeid",
                status: "status",
                uname: "uname",
                totalfee: "totalfee",
                addtime: "addtime",
                receiver_address: "address",
                receiver_province: "receiver_province",
                receiver_name: "receiver_name",
                receiver_city: "receiver_city",
                receiver_district: "receiver_district",
                receiver_link: "phone",
                posttype: "posttype",
                isfinish: "isfinish",
                user_pay_url: "url",
                itemname: "itemname",
                itemimg: "itemimg",
                itemid: "itemid",
                itemfee: "itemfee",
                uid: "uid",
                price: "price",
                num: "num",
                productid: "productid"
            }
        },
        readAddressList: {
            url: "" + server_root + "/mobile/trade/address/list",
            expire: 0,
            key: [ "" ],
            map: {
                addressid: "addressid",
                uid: "uid",
                receiver: "receiver",
                province: "province",
                city: "city",
                district: "district",
                address: "address",
                link: "phone",
                zipcode: "zipcode"
            }
        },
        addressDetail: {
            url: "" + server_root + "/mobile/trade/address/detail",
            key: [ "addressid" ],
            map: {
                addressid: "addressid",
                uid: "uid",
                receiver: "receiver",
                province: "province",
                city: "city",
                district: "district",
                address: "address",
                link: "phone",
                zipcode: "zipcode"
            }
        },
        cancelOrder: {
            url: "" + server_root + "/mobile/trade/order/cancel",
            key: [ "tradeid" ]
        },
        saveAddress: {
            url: "" + server_root + "/mobile/trade/address/save",
            key: [ "addressid", "receiver", "province", "city", "district", "address", "link" ]
        },
        createAddress: {
            url: "" + server_root + "/mobile/trade/address/save",
            key: [ "uid", "receiver", "province", "city", "district", "address", "link" ]
        },
        deleteAddress: {
            url: "" + server_root + "/mobile/trade/address/delete",
            expire: 0,
            key: [ "addressid" ]
        },
        setDefaultAddress: {
            url: "" + server_root + "/mobile/trade/address/setDefault",
            key: [ "addressid" ],
            expire: 0
        },
        getDefaultAddress: {
            url: "" + server_root + "/mobile/trade/address/getDefault",
            key: [ "" ],
            map: {
                receiver: "name",
                address: "detail",
                link: "tel",
                addressid: "id"
            }
        },
        readCart: {
            url: "" + server_root + "/mobile/trade/cart/list",
            key: [ "" ],
            expire: 500,
            map: {
                itemfee: "total",
                item_list: "list",
                itemid: "id",
                keyid: "keyid",
                itemname: "name",
                itemimg: "src",
                price: "price",
                productid: "norm_id",
                norm_price: "norm_price",
                norm_name: "norm_name",
                quantity: "number",
                item_total: "total"
            }
        },
        updateCart: {
            url: "" + server_root + "/mobile/trade/cart/edit",
            key: [ "keyid", "quantity", "productid" ],
            expire: 0,
            map: {
                item_list: "list"
            }
        },
        createCart: {
            url: "" + server_root + "/mobile/trade/cart/add",
            key: [ "itemid", "quantity", "productid" ],
            expire: 0,
            map: {
                item_list: "list"
            }
        },
        deleteCart: {
            url: "" + server_root + "/mobile/trade/cart/delete",
            key: [ "keyid" ],
            expire: 0,
            map: {
                item_list: "list"
            }
        },
        generateOrder: {
            url: "" + server_root + "/index.php?model=buy&action=ordercomp",
            key: [ "addressid", "wayid", "posttime", "postimmediate", "paymentid", "memo", "tax_company" ],
            expire: 0,
            map: {
                tradeid: "id",
                user_pay_url: "url"
            }
        },
        businessHours: {
            url: "" + server_root + "/mobile/opentime/getConfig",
            key: [ "" ],
            expire: 144e4,
            map: {
                end_warning_time: "warning_time",
                end_time: "close_time",
                start_time: "open_time"
            }
        }
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/http/http-debug", [ "../message/message-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "jquery-debug", "hammer-debug", "underscore-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Error, Message, http, mapping, message;
    $ = require("jquery-debug");
    Message = require("../message/message-debug");
    message = new Message();
    mapping = require("../plugin/mapping/mapping-debug");
    Error = require("../error/error-debug");
    http = function(parameter) {
        message.open("loading");
        $.ajaxSetup({
            dataType: "JSON",
            type: "POST",
            error: function(error) {
                message.close();
                Error(error, parameter.caller, parameter.namespace);
                return parameter.caller.trigger("" + parameter.namespace + ":error", error, parameter.data);
            },
            success: function(respond) {
                var data;
                if ($("#fruit-ui-message .icon-spinner")[0]) {
                    message.close();
                }
                if (respond.err !== null) {
                    Error(respond.err);
                    return parameter.caller.trigger("" + parameter.namespace + ":error", respond.err, parameter.data);
                } else {
                    data = mapping(parameter.map, respond.data);
                    return parameter.caller.trigger("" + parameter.namespace + ":success", data, parameter.data);
                }
            }
        });
        return $.ajax(parameter);
    };
    return module.exports = http;
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/message/message-debug", [ "hammer-debug", "underscore-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, prefix, tpl, _;
    $ = require("hammer-debug");
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    tpl = '<div id="fruit-ui-message" >\n<div class="message" tabindex="-1">\n{{#success}}\n<i class="icon-ok"></i>\n{{/success}}{{#tip}}\n<i class="icon-warning-sign"></i>\n{{/tip}}{{#error}}\n<i class="icon-remove"></i>\n{{/error}}{{#loading}}\n<i class="icon-spinner icon-spin"></i>\n{{/loading}}{{#message}}\n<span>{{{message}}}</span>\n{{/message}}\n</div>\n</div>';
    prefix = "fruit-ui-message";
    localStorage.zonda_message_id = "1";
    $("body").hammer().on("tap", "#" + prefix + " .message", function() {
        return $("#" + prefix).remove();
    });
    Message = function() {
        var _this = this;
        this.id = new Date().valueOf();
        this.timer = "";
        this.close = function() {
            var $message;
            $message = $("#" + prefix);
            console.log($message.prop("message-id"));
            if (_this.id === $message.prop("message-id")) {
                $message.remove();
            }
            return _this;
        };
        this.open = function(type, message, delay) {
            var timeout;
            clearTimeout(_this.timer);
            $("input").blur();
            $("#" + prefix).remove();
            $("body").append(Mustache.render(tpl, {
                success: function() {
                    if (type === "success") {
                        return true;
                    }
                }(),
                error: function() {
                    if (type === "error") {
                        return true;
                    }
                }(),
                tip: function() {
                    if (type === "tip") {
                        return true;
                    }
                }(),
                loading: function() {
                    if (type === "loading") {
                        return true;
                    }
                }(),
                message: message
            }));
            $("#" + prefix).prop("message-id", _this.id);
            timeout = 1300;
            if (delay) {
                timeout = delay;
            }
            _this.timer = setTimeout(function() {
                return _this.close();
            }, timeout);
            return _this;
        };
        return this;
    };
    return module.exports = Message;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/plugin/mapping/mapping-debug", [ "underscore-debug" ], function(require, exports, module) {
    var clone, result, _;
    _ = require("underscore-debug");
    result = "";
    clone = function(source, parent, parent_key) {
        var tmp;
        if (_.isArray(source)) {
            tmp = [];
            _.each(source, function(cell) {
                return clone(cell, tmp);
            });
        } else {
            tmp = {};
            _.each(clone.map, function(tpl_key, server_key) {
                if (source && source[server_key]) {
                    tmp[tpl_key] = source[server_key];
                    if (_.isArray(tmp[tpl_key]) || _.isObject(tmp[tpl_key])) {
                        return clone(tmp[tpl_key], tmp, tpl_key);
                    }
                }
            });
        }
        if (_.isUndefined(parent)) {
            return result = tmp;
        } else {
            if (_.isArray(parent)) {
                return parent.push(tmp);
            } else {
                if (parent_key) {
                    return parent[parent_key] = tmp;
                } else {
                    return parent = tmp;
                }
            }
        }
    };
    return module.exports = function(map, source) {
        clone.map = map;
        clone(source);
        return result;
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/error/error-debug", [ "../remoteLog/log-debug", "../message/message-debug", "jquery-debug", "backbone-debug", "hammer-debug", "underscore-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Backbone, Log, Message, message;
    Log = require("../remoteLog/log-debug");
    $ = require("jquery-debug");
    Backbone = require("backbone-debug");
    Message = require("../message/message-debug");
    message = new Message();
    window.onerror = function() {
        var arg;
        arg = Array.prototype.slice(arguments);
        return Log({
            error: arg
        });
    };
    return module.exports = function(error, caller, namespace) {
        console.error(error);
        if (caller) {
            console.error(caller);
        }
        if (caller) {
            console.error(namespace);
        }
        window.zonda_error = error;
        Log({
            url: location.href,
            error: error
        });
        if (typeof error !== "string") {
            return message.open("error", '<p class="label label-important">\n  ' + error.status + "\n</p>\n<p>糟糕，服务器发生错误了 >_<</p>");
        } else {
            switch (error) {
              case "请登录":
                return setTimeout(function() {
                    return Backbone.Router.prototype.navigate("user/entrance", {
                        trigger: true
                    });
                }, 10);

              default:
                return message.open("tip", error);
            }
        }
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/remoteLog/log-debug", [ "jquery-debug" ], function(require, exports, module) {
    var $;
    $ = require("jquery-debug");
    return module.exports = function(error) {
        return $.ajax({
            url: "http://play.sxz.dashu.us/log/?a=record",
            type: "POST",
            data: {
                log: JSON.stringify(error)
            },
            success: function() {},
            error: function() {}
        });
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/cache/cache-debug", [], function(require, exports, module) {
    var Cache, Storage, default_expire, prefix;
    prefix = "zonda_model_cache";
    default_expire = 0;
    if (localStorage[prefix] === void 0 || typeof JSON.parse(localStorage[prefix]) !== "object") {
        localStorage[prefix] = JSON.stringify({});
    }
    Storage = {
        get: function() {
            return JSON.parse(localStorage[prefix]);
        },
        set: function(data) {
            return localStorage[prefix] = JSON.stringify(data);
        }
    };
    return Cache = function() {
        function Cache(url, expire) {
            var tmp;
            this.url = url;
            this.expire = expire;
            if (!this.expire) {
                this.expire = default_expire;
            }
            tmp = Storage.get();
            if (!tmp[this.url]) {
                tmp[this.url] = {};
                Storage.set(tmp);
            }
        }
        Cache.prototype.get = function(request) {
            var cache, key, now, tmp;
            key = JSON.stringify(request);
            tmp = Storage.get();
            if (!tmp[this.url] || !tmp[this.url][key]) {
                return false;
            }
            cache = tmp[this.url][key];
            now = new Date().valueOf();
            if (this.expire + cache.timestamp > now) {
                return cache.data;
            } else {
                return false;
            }
        };
        Cache.prototype.set = function(respond, request, is_cache) {
            var key, tmp;
            if (is_cache) {
                return false;
            }
            tmp = Storage.get();
            if (!tmp[this.url]) {
                tmp[this.url] = {};
            }
            key = JSON.stringify(request);
            tmp[this.url][key] = {
                timestamp: new Date().valueOf(),
                data: respond
            };
            return Storage.set(tmp);
        };
        Cache.prototype.clear = function(request) {
            var key, tmp;
            tmp = Storage.get();
            if (request) {
                key = JSON.stringify(request);
                delete tmp[this.url][key];
            } else {
                delete tmp[this.url];
            }
            return Storage.set(tmp);
        };
        return Cache;
    }();
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/hot/list/list-debug", [ "./view-debug", "../../../plugin/countdown/countdown-debug", "./model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "jquery-debug", "backbone-debug", "mustache-debug", "underscore-debug", "hammer-debug" ], function(require, exports, module) {
    var Model, View, model, view;
    View = require("./view-debug");
    Model = require("./model-debug");
    model = new Model("hotList");
    view = new View(model);
    return module.exports = {
        reload: function() {
            return view.reload();
        }
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/commodity/hot/list/view-debug", [ "../../../plugin/countdown/countdown-debug", "jquery-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, countdown, sea_base;
    $ = require("jquery-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    countdown = require("../../../plugin/countdown/countdown-debug");
    sea_base = seajs.config.data.base;
    return module.exports = Backbone.View.extend({
        tpl: '<ul>\n{{#list}}\n<li class="hot-list-li"><a href="#/commodity/item/{{id}}" class="thumb">\n<img real-src="{{src}}_160x160.jpg" src={{blank_img}} alt="{{name}}" title="{{name}}" />\n</a><a class="block" href="#commodity/item/{{id}}"><span class="name">{{name}}</span>{{#old_price}}\n<span class="now-price">\n抢购价：￥\n<span class="now-price-money">\n{{price}} 元\n</span><span class="price">\n原价：￥\n{{old_price}} 元\n</span><span class="countdown" start_time="{{start_time}}" end_time="{{end_time}}"></span>\n</span>\n{{/old_price}}{{^old_price}}\n<span class="price">\n价格：￥\n{{price}} 元\n</span>\n<span class="sales">\n销量：\n{{sales}}\n</span>\n{{/old_price}}</a><a class="arrow" href="#commodity/item/{{id}}">\n</a></li>\n{{/list}}\n</ul>',
        el: "#hot-list",
        initialize: function(model) {
            this.model = model;
            return this.model.on("" + this.model.type + ":success", this.render, this);
        },
        reload: function() {
            return this.model.get();
        },
        render: function(respond) {
            var countdown_wrap, end_time, list, start_time, view;
            view = this;
            list = respond;
            list.forEach(function(cell) {
                if (cell.name.length > 7) {
                    return cell.name = "" + cell.name.substr(0, 6) + "...";
                }
            });
            this.$el.html(Mustache.render(this.tpl, {
                list: list,
                blank_img: "" + sea_base + "ui/images/blank.png"
            }));
            this.$el.find("img[real-src]").each(function(index) {
                if (index > 3) {
                    return false;
                }
                return $(this).attr({
                    src: $(this).attr("real-src")
                });
            });
            countdown_wrap = this.$el.find(".countdown");
            start_time = countdown_wrap.attr("start_time");
            end_time = countdown_wrap.attr("end_time");
            return countdown(start_time, end_time, countdown_wrap, {
                not_start: "抢购时间:{{start}}-{{end}}",
                doing: "剩余:<span>{{h}}</span>小时<span>{{m}}</span>分<span>{{s}}</span>",
                end: "抢购结束咯~"
            });
        }
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/plugin/countdown/countdown-debug", [ "jquery-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Mustache;
    $ = require("jquery-debug");
    Mustache = require("mustache-debug");
    return module.exports = function(start_time, end_time, wrap, tpl) {
        var me;
        me = $(wrap);
        return function() {
            var end, now, start, timer;
            tpl = tpl;
            start = start_time;
            end = end_time;
            now = parseInt(new Date().valueOf() / 1e3);
            return timer = setInterval(function() {
                var day, diff, hour, human_end, human_start, minute, second;
                now = now + 1;
                if (start - now > 0) {
                    human_start = new Date(start * 1e3).toString().substr(16, 5);
                    human_end = new Date(end * 1e3).toString().substr(16, 5);
                    me.html(Mustache.render(tpl.not_start, {
                        start: human_start,
                        end: human_end
                    }));
                }
                if (start - now < 0 && end - now > 0) {
                    diff = end - now;
                    day = Math.floor(diff / 86400);
                    hour = Math.floor((diff - day * 86400) / 3600);
                    minute = Math.floor((diff - day * 86400 - hour * 3600) / 60);
                    second = Math.floor(diff - day * 86400 - hour * 3600 - minute * 60);
                    me.html(Mustache.render(tpl.doing, {
                        day: day,
                        h: hour,
                        m: minute,
                        s: second
                    }));
                }
                if (end - now < 0) {
                    return me.html(tpl.end);
                }
            }, 1e3);
        }();
    };
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/commodity/hot/list/model-debug", [ "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/cat/cat-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "../../stateMachine/main-debug", "./view-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    stateMachine = require("../../stateMachine/main-debug");
    $("#scroller .content").append('<div id="cat-ul"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    view = new View(new Model("cat"));
    return module.exports = function() {
        view.reload();
        stateMachine.cat.active();
        return layout();
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/commodity/cat/view-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, imgLoad, layout, sea_base;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    sea_base = seajs.config.data.base;
    layout = require("../../layout/layout-debug");
    imgLoad = require("../../plugin/imgLoad/imgLoad-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<ul>\n{{#list}}\n<li>\n<a name="{{name}}" class="thumb cat-cell" href="#commodity/list/{{id}}">\n<img real-src="{{src}}_310x310.jpg" src="{{blank_img}}" alt="" />\n</a>\n<a name="{{name}}" class="name cat-cell" href="#commodity/list/{{id}}">{{name}}</a>\n</li>\n{{/list}}\n</ul>',
        el: "#cat-ul",
        initialize: function(model) {
            this.model = model;
            this.model.on("" + this.model.type + ":success", this.render, this);
            return this.$el.hammer().on("tap", ".cat-cell", function() {
                var cat_name;
                cat_name = $(this).attr("name");
                return layout({
                    type: "location",
                    position: cat_name
                });
            });
        },
        reload: function() {
            this.$el.empty();
            return this.model.get();
        },
        render: function(respond) {
            var view;
            view = this;
            return this.$el.html(Mustache.render(this.tpl, {
                list: respond,
                blank_img: "" + sea_base + "ui/images/blank.png"
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/commodity/cat/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/list/list-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../plugin/titleFit/titleFit-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="list-ul"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("list"));
    return module.exports = function(id) {
        view.reload(id);
        return stateMachine.list.active();
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/commodity/list/view-debug", [ "../../plugin/titleFit/titleFit-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, imgLoad, sea_base, titleFit;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    titleFit = require("../../plugin/titleFit/titleFit-debug");
    sea_base = seajs.config.data.base;
    imgLoad = require("../../plugin/imgLoad/imgLoad-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<ul>\n{{#list}}\n<li>\n<a class="thumb" href="#commodity/item/{{id}}">\n<img real-src="{{src}}_310x310.jpg" src="{{blank_img}}" alt="" />\n</a>\n<a class="name" href="#commodity/item/{{id}}">\n<span>{{{name}}}</span>\n<span class="sales">销量：{{sales}}</span>\n</a>\n</li>\n{{/list}}\n</ul>',
        el: "#list-ul",
        initialize: function(model) {
            this.model = model;
            return this.model.on("" + this.model.type + ":success", this.render, this);
        },
        reload: function(id) {
            this.$el.empty();
            return this.model.get(id);
        },
        render: function(respond) {
            var view;
            view = this;
            respond.forEach(function(cell) {
                return cell.name = titleFit(cell.name, 7, 10, 14, 12);
            });
            return this.$el.html(Mustache.render(this.tpl, {
                list: respond,
                blank_img: "" + sea_base + "ui/images/blank.png"
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/plugin/titleFit/titleFit-debug", [], function(require, exports, module) {
    return module.exports = function(text, min, max, middel_size, small_size) {
        var length;
        if (!min) {
            min = 9;
        }
        if (!max) {
            max = 12;
        }
        if (!middel_size) {
            middel_size = 18;
        }
        if (!small_size) {
            small_size = 14;
        }
        length = text.length;
        if (length >= min && length <= (min + max) / 2) {
            text = '<span style="font-size:' + middel_size + 'px!important;padding: 0 3px;">' + text + "</span>";
        }
        if (length >= max) {
            text = '<span style="font-size:' + small_size + 'px!important;padding: 0 3px;">' + text + "</span>";
        }
        return text;
    };
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/commodity/list/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/commodity/item/item-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../buy/cart/create/create-debug", "../../message/message-debug", "../../buy/cart/create/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../plugin/titleFit/titleFit-debug", "./model-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="item-detail"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("item"));
    return module.exports = function(id) {
        view.reload(id);
        return stateMachine.item.active();
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/commodity/item/view-debug", [ "../../buy/cart/create/create-debug", "../../message/message-debug", "../../buy/cart/create/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../plugin/titleFit/titleFit-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "jquery-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, addToCart, titleFit;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    addToCart = require("../../buy/cart/create/create-debug");
    titleFit = require("../../plugin/titleFit/titleFit-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{#item}}<div class="box"><div class="thumb">\n<img src="{{src}}" alt="" />\n</div><div class="add-info">\n<span class="comment">好评率:{{comment}}</span>\n<span class="sales">销量:{{sales}}</span>\n<span class="hit">浏览量:{{hit}}</span>\n</div></div><div class="main-info">\n<span class="name">{{{name}}}</span>\n{{^has_norm}}\n<span class="price">{{price}}元</span>\n{{/has_norm}}\n</div><div class="norm-and-number">\n{{#has_norm}}\n<select class="norm">\n{{#norm}}\n<option value="{{norm_id}}" price="{{norm_price}}">{{norm_name}} / {{price}}元</option>\n{{/norm}}\n</select>\n{{/has_norm}}<div class="number fruit-ui-number">\n<span class="minus">\n<i class="icon-minus"></i>\n</span>\n<input type="number" min="1" class="number-value" value="1" />\n<span class="plus">\n<i class="icon-plus"></i>\n</span>\n</div>\n</div>{{^is_update}}\n<div class="add-to-cart fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-plus-sign"></i>\n加入购物车\n</div>\n{{/is_update}}{{#is_update}}\n<div class="update-to-cart fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n保存到购物车\n</div><div class="delete-to-cart fruit-ui-btn">\n<i class="icon-minus-sign"></i>\n从购物车中删除\n</div>{{/is_update}}{{/item}}',
        el: "#item-detail",
        initialize: function(model) {
            var _this = this;
            this.model = model;
            this.model.on("" + this.model.type + ":success", this.render, this);
            return this.$el.on("tap", ".add-to-cart", function() {
                var norm_id, number;
                number = _this.$el.find(".number-value").val();
                norm_id = _this.$el.find(".norm").val();
                return addToCart(_this.id, number, norm_id);
            });
        },
        reload: function(id) {
            this.id = id;
            this.$el.empty();
            return this.model.get(id);
        },
        render: function(respond) {
            var view;
            view = this;
            if (!respond.norm || respond.norm.length === 0) {
                respond.has_norm = false;
            } else {
                respond.has_norm = true;
            }
            respond.name = titleFit(respond.name, 9, 12);
            return this.$el.html(Mustache.render(this.tpl, {
                item: respond
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/cart/create/create-debug", [ "../../../message/message-debug", "./model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "hammer-debug", "underscore-debug", "backbone-debug", "mustache-debug", "jquery-debug" ], function(require, exports, module) {
    var Message, Model, handler, message, model;
    Message = require("../../../message/message-debug");
    message = new Message();
    handler = function(respond) {
        return $("#cart-button .num").html(respond.list.length);
    };
    Model = require("./model-debug");
    model = new Model("createCart");
    model.on("" + model.type + ":success", function(respond) {
        handler(respond);
        return message.open("success", "已加入购物车中~", 1300);
    });
    return module.exports = function(id, number, norm_id, callback) {
        if (callback) {
            handler = callback;
        }
        return model.set(id, number, norm_id);
    };
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/buy/cart/create/model-debug", [ "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.set = function() {
            return this.get.apply(this, arguments);
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/commodity/item/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/user-debug", [ "./entrance/entrance-debug", "../layout/layout-debug", "../layout/nav/nav-debug", "../stateMachine/nav-debug", "../layout/main/main-debug", "../plugin/imgLoad/imgLoad-debug", "./entrance/view-debug", "../stateMachine/main-debug", "./info/info-debug", "./info/view-debug", "./info/model-debug", "../class/model-debug", "../serverApi-debug", "../http/http-debug", "../message/message-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "../cache/cache-debug", "./login/login-debug", "./login/view-debug", "./login/model-debug", "./register/register-debug", "./register/view-debug", "./register/model-debug", "./orderList/orderList-debug", "./orderList/view-debug", "./orderList/model-debug", "./orderDetail/orderDetail-debug", "./orderDetail/view-debug", "./orderDetail/model-debug", "backbone-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var Backbone, entrance, info, login, orderDetail, orderList, register;
    Backbone = require("backbone-debug");
    entrance = require("./entrance/entrance-debug");
    info = require("./info/info-debug");
    login = require("./login/login-debug");
    register = require("./register/register-debug");
    orderList = require("./orderList/orderList-debug");
    orderDetail = require("./orderDetail/orderDetail-debug");
    return module.exports = function(action, paramter) {
        switch (action) {
          case "entrance":
            return entrance();

          case "info":
            return info();

          case "login":
            return login();

          case "register":
            return register();

          case "orderList":
            if (paramter) {
                return orderList(paramter);
            } else {
                orderList("inOrders");
                return Backbone.Router.prototype.navigate("user/orderList/inOrders");
            }
            break;

          case "orderDetail":
            return orderDetail(paramter);

          default:
            return info();
        }
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/entrance/entrance-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="entrance"></div>');
    View = require("./view-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View();
    return module.exports = function() {
        view.render();
        stateMachine.entrance.active();
        return layout();
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/entrance/view-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, layout;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<h2>请先登陆或注册水果巴士</h2>\n<div class="login-btn fruit-ui-btn fruit-ui-btn-success" name="#user/login">登陆</div>\n<div class="register-btn fruit-ui-btn" name="#user/register">注册</div>',
        el: "#entrance",
        initialize: function() {
            return this.$el.hammer().on("tap", ".fruit-ui-btn", function() {
                var name;
                name = $(this).attr("name");
                return Backbone.Router.prototype.navigate("" + name, {
                    trigger: true
                });
            });
        },
        render: function() {
            return this.$el.html(this.tpl);
        }
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/info/info-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="user-info"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("userInfo"));
    return module.exports = function() {
        view.reload();
        stateMachine.info.active();
        return layout();
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/user/info/view-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, layout;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<div class="info-header">\n<div class="wellcome">\n欢迎您！{{#userinfo}} {{username}} {{/userinfo}}\n</div>\n<div href="#user/entrance" class="logout">退出</div>\n</div><div class="my-orders info-list">\n<h2>我的订单</h2>\n<ul>\n<li name="#user/orderList/inOrders" class="fruit-ui-arrow-btn">进行中的订单</li>\n<li name="#user/orderList/completeOrders" class="fruit-ui-arrow-btn">已完成的订单</li>\n</ul>\n</div><div class="my-info info-list">\n<h2>我的个人信息</h2>\n<ul>\n<li name="#address/read" class="fruit-ui-arrow-btn">收货地址</li>\n</ul>\n</div>',
        el: "#user-info",
        initialize: function(model) {
            var _this = this;
            this.model = model;
            this.model.on("" + this.model.type + ":success", this.render, this);
            this.model.on("logout:success", function() {
                return Backbone.Router.prototype.navigate("user/entrance", {
                    trigger: true
                });
            });
            this.$el.hammer().on("tap", ".info-list ul li", function() {
                var hash;
                hash = $(this).attr("name");
                return Backbone.Router.prototype.navigate("" + hash, {
                    trigger: true
                });
            });
            return this.$el.hammer().on("tap", ".logout", function() {
                _this.model.logout();
                return _this.model.clearCache();
            });
        },
        reload: function() {
            this.$el.empty();
            return this.model.get();
        },
        render: function(userInfo) {
            return this.$el.html(Mustache.render(this.tpl, {
                userinfo: userInfo
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/user/info/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var API, Model, ModelClass, http;
    ModelClass = require("../../class/model-debug");
    API = require("../../serverApi-debug");
    http = require("../../http/http-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.logout = function() {
            var args, data;
            args = Array.prototype.slice.call(arguments);
            data = {};
            API["logout"].key.forEach(function(el, index) {
                if (args[index]) {
                    return data[el] = args[index];
                }
            });
            return http({
                url: API["logout"].url,
                data: data,
                caller: this,
                namespace: "logout",
                map: API["logout"].map
            });
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/login/login-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../message/message-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="login"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("login"));
    return module.exports = function() {
        view.render();
        stateMachine.login.active();
        return layout({
            type: "location",
            position: "登陆水果巴士"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/user/login/view-debug", [ "../../message/message-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, layout, message, _;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    _ = require("underscore-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<form>\n<input tabindex="1" type="url" class="email fruit-ui-input" placeholder="邮箱"/>\n<input tabindex="2" type="password" class="passwd fruit-ui-input" placeholder="密码"/>\n</form><div tabindex="3" class="login-btn fruit-ui-btn fruit-ui-btn-success">登陆</div>\n<!--\n<div class="forget-passwd">忘记密码?</div>\n-->',
        el: "#login",
        initialize: function(model) {
            var me;
            this.model = model;
            me = this;
            this.$el.hammer().on("tap", ".login-btn", function() {
                var email, passwd;
                email = _.escape(me.$el.find(".email").val().replace(/\s/g, ""));
                passwd = _.escape(me.$el.find(".passwd").val().replace(/\s/g, ""));
                if (email === "") {
                    message.open("tip", "请填写邮箱");
                    return;
                }
                if (passwd === "") {
                    message.open("tip", "密码不能为空");
                } else {
                    return me.model.get(email, passwd);
                }
            });
            return this.model.on("" + this.model.type + ":success", function() {
                return history.go(-2);
            });
        },
        render: function() {
            return this.$el.html(this.tpl);
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/user/login/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/register/register-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../message/message-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="register"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("register"));
    return module.exports = function() {
        view.render();
        stateMachine.register.active();
        return layout({
            type: "location",
            position: "注册水果巴士"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/user/register/view-debug", [ "../../message/message-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, layout, message, _;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    _ = require("underscore-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '<form>\n<input type="text" class="email fruit-ui-input" placeholder="邮箱"/>\n<input type="password" class="passwd fruit-ui-input" placeholder="密码"/>\n<input type="password" class="re-passwd fruit-ui-input" placeholder="确认密码"/>\n</form>\n<div class="register-btn fruit-ui-btn fruit-ui-btn-success">注册</div>',
        el: "#register",
        initialize: function(model) {
            var _this = this;
            this.model = model;
            this.$el.hammer().on("tap", ".register-btn", function() {
                return _this.submit();
            });
            return this.model.on("" + this.model.type + ":success", function() {
                return history.go(-2);
            });
        },
        render: function() {
            return this.$el.html(this.tpl);
        },
        submit: function() {
            var email, passwd, repasswd;
            email = _.escape(this.$el.find(".email").val().replace(/\s/g, ""));
            passwd = _.escape(this.$el.find(".passwd").val().replace(/\s/g, ""));
            repasswd = _.escape(this.$el.find(".re-passwd").val().replace(/\s/g, ""));
            if (email === "") {
                message.open("tip", "请填写邮箱");
                return;
            }
            if (passwd === "") {
                message.open("tip", "密码不能为空");
            } else if (passwd !== repasswd) {
                message.open("tip", "两次输入的密码不一致");
            } else {
                return this.model.get(email, passwd, repasswd);
            }
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/user/register/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/orderList/orderList-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="orderList"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("orderList"));
    return module.exports = function(paramter) {
        view.reload(paramter);
        stateMachine.orderList.active();
        switch (paramter) {
          case "inOrders":
            return layout({
                type: "location",
                position: "进行中的订单"
            });

          case "completeOrders":
            return layout({
                type: "location",
                position: "已完成的订单"
            });

          default:
            return layout({
                type: "location",
                position: "进行中的订单"
            });
        }
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/user/orderList/view-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, layout, _;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    _ = require("underscore-debug");
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{^list}}\n<div class="no-orders">\n对不起，没有找到相应信息的订单!\n</div>\n{{/list}}\n{{#show}}\n<ul class="list">\n{{#list}}\n<li class="order-id" name="#user/orderDetail/{{tradeid}}">\n<div>订单号:<span>{{tradeid}}</span><span class="order-status">{{status}}</span></div>\n<div>金额:<span>￥{{totalfee}}元</span><span class="order-time">{{time}}</span></div>\n</li>\n{{/list}}\n</ul>\n{{/show}}',
        el: "#orderList",
        initialize: function(model) {
            this.model = model;
            this.model.on("" + this.model.type + ":success", this.render, this);
            return this.$el.hammer().on("tap", "ul li", function() {
                var hash;
                hash = $(this).attr("name");
                return Backbone.Router.prototype.navigate("" + hash, {
                    trigger: true
                });
            });
        },
        reload: function(paramter) {
            this.$el.html("");
            this.order_type = paramter;
            switch (paramter) {
              case "inOrders":
                return this.model.get("run");

              case "completeOrders":
                return this.model.get("finish");

              default:
                return this.model.get("run");
            }
        },
        transeData: function(data) {
            var date, tmp;
            date = new Date(data.addtime * 1e3);
            tmp = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "  " + date.getHours() + ":";
            if (date.getMinutes() === 0) {
                tmp += "00";
            } else {
                tmp += date.getMinutes();
            }
            data.time = tmp;
            return data.totalfee = data.totalfee.toFixed(2);
        },
        render: function(respond) {
            if (respond) {
                _.each(respond, this.transeData);
            }
            return this.$el.html(Mustache.render(this.tpl, {
                list: function() {
                    if (respond.length > 0) {
                        return respond;
                    }
                }(),
                show: function() {
                    if (respond.length > 0) {
                        return true;
                    }
                }()
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/user/orderList/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/user/orderDetail/orderDetail-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../message/message-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="orderDetail"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("orderDetail"));
    return module.exports = function(paramter) {
        view.reload(paramter);
        stateMachine.orderDetail.active();
        return layout({
            type: "location",
            position: "" + paramter + "号订单"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/user/orderDetail/view-debug", [ "../../message/message-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, layout, message;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{^trade}}\n<div class="no-orders">\n对不起，没有找到相应订单信息!\n</div>\n{{/trade}}{{#url}}\n<a href="{{url}}&url=/mobile.html#buy/pay/sucess" class="fruit-ui-btn fruit-ui-btn-success" style="display: block;">\n去支付\n<i class="icon-circle-arrow-right"></i>\n</a>\n{{/url}}{{#trade}}\n<input type="hidden" class="uid" value="{{uid}}"/>\n<div class="order-info" value="{{tradeid}}">\n<div>订单号:<span>{{tradeid}}</span><span class="order-status">{{status}}</span></div>\n<div>金额:<span>￥{{totalfee}}元</span><span class="order-time">{{time}}</span></div>\n</div><div class="address">\n<h2>收获地址</h2>\n<h3>{{receiver_name}}</h3>\n<h3>{{area}}{{address}}</h4>\n<h3>{{phone}}</h3>\n</div>\n{{/trade}}\n<div class="goods">\n<h2>商品详情</h2>\n{{#order_list}}\n<div class="goods-detail">\n<a href="#commodity/item/{{itemid}}" class="thumb">\n<img src="{{itemimg}}" alt="商品图片" />\n</a>\n<div class="goods-des">\n<h3>{{itemname}}</h3>\n<h4>单价:{{price}}</h4>\n<h4>数量:{{num}}</h4>\n<h4>小计:￥{{itemfee}}元</h4>\n</div>\n</div>\n{{/order_list}}\n<span class="clear"></span>\n</div>{{#cancel}}\n<div class="cancel-btn fruit-ui-btn">取消订单</div>\n{{/cancel}}',
        el: "#orderDetail",
        initialize: function(model) {
            var me;
            this.model = model;
            me = this;
            this.model.on("" + this.model.type + ":success", this.render, this);
            this.model.on("cancelOrder:success", function() {
                message.open("success", "取消订单成功");
                return Backbone.Router.prototype.navigate("user/orderList/inOrders", {
                    trigger: true
                });
            });
            return this.$el.hammer().on("tap", ".cancel-btn", function() {
                return me.model.cancelOrder(me.$el.find(".order-info").attr("value"));
            });
        },
        reload: function(paramter) {
            this.$el.html("");
            return this.model.get(paramter);
        },
        transeData: function(data) {
            var date, tmp;
            date = new Date(data.addtime * 1e3);
            tmp = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "  " + date.getHours() + ":";
            if (date.getMinutes() === 0) {
                tmp += "00";
            } else {
                tmp += date.getMinutes();
            }
            data.time = tmp;
            return data.totalfee = data.totalfee.toFixed(2);
        },
        render: function(respond) {
            this.transeData(respond.trade);
            if (respond.trade.receiver_province) {
                respond.trade.area = "四川省成都市电子科技大学清水河校区";
            }
            return this.$el.html(Mustache.render(this.tpl, {
                trade: respond.trade,
                order_list: respond.order_list,
                url: respond.url,
                cancel: function() {
                    if (respond.trade.status === "未支付") {
                        return true;
                    }
                }()
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/user/orderDetail/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var API, Model, ModelClass, http, orderList;
    ModelClass = require("../../class/model-debug");
    API = require("../../serverApi-debug");
    http = require("../../http/http-debug");
    orderList = new ModelClass("orderList");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.cancelOrder = function() {
            var args, data;
            args = Array.prototype.slice.call(arguments);
            data = {};
            API["cancelOrder"].key.forEach(function(el, index) {
                if (args[index]) {
                    return data[el] = args[index];
                }
            });
            return http({
                url: API["cancelOrder"].url,
                data: data,
                caller: this,
                namespace: "cancelOrder",
                map: API["cancelOrder"].map
            });
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/buy/buy-debug", [ "./cart/cart-debug", "./cart/read/read-debug", "../stateMachine/main-debug", "../layout/layout-debug", "../layout/nav/nav-debug", "../stateMachine/nav-debug", "../layout/main/main-debug", "../plugin/imgLoad/imgLoad-debug", "./cart/read/view-debug", "./cart/update/update-debug", "./cart/update/view-debug", "../plugin/titleFit/titleFit-debug", "./cart/delete/delete-debug", "../message/message-debug", "./cart/delete/model-debug", "../class/model-debug", "../serverApi-debug", "../http/http-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "../cache/cache-debug", "./cart/update/model-debug", "./cart/read/model-debug", "./generateOrder/generateOrder-debug", "./generateOrder/view-debug", "./pay/pay-debug", "./pay/view-debug", "./generateOrder/model-debug", "backbone-debug", "jquery-debug", "util-debug", "hammer-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
        var cart, generateOrder, pay;
        cart = require("./cart/cart-debug");
        generateOrder = require("./generateOrder/generateOrder-debug");
        pay = require("./pay/pay-debug");
        return module.exports = function(action, parameter) {
            switch (action) {
              case "cart":
                return cart(parameter);

              case "generateOrder":
                return generateOrder(parameter);

              case "pay":
                return pay(parameter);

              default:
                return cart(parameter);
            }
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/cart/cart-debug", [ "./read/read-debug", "../../stateMachine/main-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./read/view-debug", "./update/update-debug", "./update/view-debug", "../../plugin/titleFit/titleFit-debug", "./delete/delete-debug", "../../message/message-debug", "./delete/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "./update/model-debug", "./read/model-debug", "backbone-debug", "jquery-debug", "util-debug", "hammer-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var Backbone, read;
    Backbone = require("backbone-debug");
    Backbone.Events.on("createCart:success", function(respond) {
        return $("#cart-button .num").html(respond.list.length);
    });
    Backbone.Events.on("updateCart:success", function(respond) {
        var cart_num;
        if (respond.list.length === 0) {
            cart_num = '<span style="color: #FFF;">0</span>';
            $("#cart-button .num").html(cart_num);
            return false;
        }
        return $("#cart-button .num").html(respond.list.length);
    });
    Backbone.Events.on("deleteCart:success", function(respond) {
        var cart_num;
        if (respond.list.length === 0) {
            cart_num = '<span style="color: #FFF;">0</span>';
            $("#cart-button .num").html(cart_num);
            return false;
        }
        return $("#cart-button .num").html(respond.list.length);
    });
    read = require("./read/read-debug");
    return module.exports = function(parameter) {
        switch (parameter) {
          case "read":
            return read();

          default:
            return read();
        }
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/buy/cart/read/read-debug", [ "../../../stateMachine/main-debug", "../../../layout/layout-debug", "../../../layout/nav/nav-debug", "../../../stateMachine/nav-debug", "../../../layout/main/main-debug", "../../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../update/update-debug", "../update/view-debug", "../../../plugin/titleFit/titleFit-debug", "../delete/delete-debug", "../../../message/message-debug", "../delete/model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "../update/model-debug", "./model-debug", "jquery-debug", "backbone-debug", "util-debug", "hammer-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Backbone, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    $("#scroller .content").append('<div id="cart-read"></div>');
    Backbone = require("backbone-debug");
    stateMachine = require("../../../stateMachine/main-debug");
    layout = require("../../../layout/layout-debug");
    View = require("./view-debug");
    Model = require("./model-debug");
    view = new View(new Model("readCart"));
    return module.exports = function() {
        Backbone.Router.prototype.navigate("buy/cart/read");
        view.reload();
        stateMachine.readCart.active();
        return layout({
            type: "location",
            position: "我的购物车"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/cart/read/view-debug", [ "../update/update-debug", "../../../stateMachine/main-debug", "../../../layout/layout-debug", "../../../layout/nav/nav-debug", "../../../stateMachine/nav-debug", "../../../layout/main/main-debug", "../../../plugin/imgLoad/imgLoad-debug", "../update/view-debug", "../../../plugin/titleFit/titleFit-debug", "../delete/delete-debug", "../../../message/message-debug", "../delete/model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "../update/model-debug", "hammer-debug", "backbone-debug", "mustache-debug", "jquery-debug", "util-debug", "iscroll-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Backbone, Mustache, titleFit, update;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    update = require("../update/update-debug");
    titleFit = require("../../../plugin/titleFit/titleFit-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{^is_empty}}\n{{#cart_list}}\n<ul>{{#list}}\n<li class="fruit-ui-arrow-btn" item-id="{{id}}" keyid="{{keyid}}" number="{{number}}" norm-id="{{norm_id}}" >\n<div class="thumb">\n<img src="{{src}}_310x310.jpg" alt="" />\n</div>\n<div class="info">\n<span class="name">{{{name}}} {{norm_name}}</span>{{#norm_price}}\n<span class="price">单价：{{norm_price}}元</span>\n{{/norm_price}}{{^norm_price}}\n<span class="price">单价：{{price}}元</span>\n{{/norm_price}}<span class="number">数量：{{number}}</span><span class="total">小计：{{total}}元</span></div>\n</li>\n{{/list}}</ul><div class="cart-total-price">应付金额：\n<span class="spe">\n{{total}} 元\n</span>\n</div><div class="generate-order fruit-ui-btn fruit-ui-btn-success">\n去结算\n<i class="icon-circle-arrow-right"></i>\n</div>{{/cart_list}}\n{{/is_empty}}\n{{#is_empty}}\n<div class="empty-cart-tip alert alert-success">\n<i class="icon-shopping-cart"></i>\n购物车是空的，快去选购美味吧~&nbsp;&nbsp;\n<i class="icon-circle-arrow-right"></i>\n</div>\n{{/is_empty}}',
        el: "#cart-read",
        initialize: function(model) {
            this.model = model;
            this.model.on("" + this.model.type + ":success", this.render, this);
            this.$el.on("tap", "li", function() {
                var id, keyid, norm_id, number;
                id = $(this).attr("item-id");
                keyid = $(this).attr("keyid");
                norm_id = $(this).attr("norm-id");
                number = $(this).attr("number");
                return update(id, keyid, number, norm_id);
            });
            this.$el.on("tap", ".generate-order", function() {
                return Backbone.Router.prototype.navigate("buy/generateOrder", {
                    trigger: true
                });
            });
            return this.$el.on("tap", ".empty-cart-tip", function() {
                return Backbone.Router.prototype.navigate("#commodity/hot", {
                    trigger: true
                });
            });
        },
        reload: function() {
            this.$el.empty();
            return this.model.get();
        },
        render: function(respond) {
            respond.list.forEach(function(cell) {
                return cell.name = titleFit(cell.name);
            });
            return this.$el.html(Mustache.render(this.tpl, {
                cart_list: respond,
                is_empty: function() {
                    if (respond.list.length === 0) {
                        return true;
                    } else {
                        return false;
                    }
                }()
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/buy/cart/update/update-debug", [ "../../../stateMachine/main-debug", "../../../layout/layout-debug", "../../../layout/nav/nav-debug", "../../../stateMachine/nav-debug", "../../../layout/main/main-debug", "../../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../../plugin/titleFit/titleFit-debug", "../delete/delete-debug", "../../../message/message-debug", "../delete/model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "./model-debug", "jquery-debug", "backbone-debug", "util-debug", "hammer-debug", "iscroll-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Backbone, Model, Router, View, layout, stateMachine, update, view;
    $ = require("jquery-debug");
    $("#scroller .content").append('<div id="cart-update"></div>');
    Backbone = require("backbone-debug");
    stateMachine = require("../../../stateMachine/main-debug");
    layout = require("../../../layout/layout-debug");
    View = require("./view-debug");
    Model = require("./model-debug");
    view = new View(new Model("updateCart"));
    update = function(id, keyid, number, norm_id) {
        view.reload(id, keyid, number, norm_id);
        stateMachine.updateCart.active();
        return layout({
            type: "location",
            position: "修改购物车"
        });
    };
    Router = Backbone.Router.extend({
        routes: {
            "buy/cart/update/:id/keyid/:keyid/number/:number": update,
            "buy/cart/update/:id/keyid/:keyid/number/:number/norm/": update,
            "buy/cart/update/:id/keyid/:keyid/number/:number/norm/:norm_id": update
        }
    });
    new Router();
    return module.exports = function(id, keyid, number, norm_id) {
        return Backbone.Router.prototype.navigate("buy/cart/update/" + id + "/keyid/" + keyid + "/number/" + number + "/norm/" + norm_id, {
            trigger: true
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/cart/update/view-debug", [ "../../../plugin/titleFit/titleFit-debug", "../delete/delete-debug", "../../../message/message-debug", "../delete/model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "jquery-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, destroy, message, titleFit;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    titleFit = require("../../../plugin/titleFit/titleFit-debug");
    destroy = require("../delete/delete-debug");
    Message = require("../../../message/message-debug");
    message = new Message();
    return module.exports = Backbone.View.extend({
        tpl: '{{#item}}<div class="box"><div class="thumb">\n<img src="{{src}}" alt="" />\n</div><div class="add-info">\n<span class="comment">好评率:{{comment}}</span>\n<span class="sales">销量:{{sales}}</span>\n<span class="hit">浏览量:{{hit}}</span>\n</div></div><div class="main-info">\n<span class="name">{{{name}}}</span>\n{{^has_norm}}\n<span class="price">{{price}}元</span>\n{{/has_norm}}\n</div><div class="norm-and-number">\n{{#has_norm}}\n<select class="norm">\n{{#norm}}\n<option value="{{norm_id}}" price="{{norm_price}}">{{norm_name}} / {{price}}元</option>\n{{/norm}}\n</select>\n{{/has_norm}}<div class="number fruit-ui-number">\n<span class="minus">\n<i class="icon-minus"></i>\n</span>\n<input type="number" min="1" class="number-value" value="1" />\n<span class="plus">\n<i class="icon-plus"></i>\n</span>\n</div>\n</div>{{^is_update}}\n<div class="add-to-cart fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-plus-sign"></i>\n加入购物车\n</div>\n{{/is_update}}{{#is_update}}\n<div class="update-to-cart fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n保存到购物车\n</div><div class="delete-to-cart fruit-ui-btn">\n<i class="icon-minus-sign"></i>\n从购物车中删除\n</div>{{/is_update}}{{/item}}',
        el: "#cart-update",
        initialize: function(model) {
            var _this = this;
            this.model = model;
            this.model.on("itemDetail:success", this.render, this);
            this.model.on("" + this.model.type + ":success", function() {
                history.go(-1);
                return message.open("success", "已保存到购物车", 1300);
            });
            this.$el.on("tap", ".delete-to-cart", function() {
                var norm_id, number;
                norm_id = _this.$el.find(".norm").val();
                number = _this.$el.find(".number-value").val();
                return destroy(_this.keyid, number, norm_id);
            });
            return this.$el.on("tap", ".update-to-cart", function() {
                var norm_id, number;
                norm_id = _this.$el.find(".norm").val();
                number = _this.$el.find(".number-value").val();
                return _this.model.set(_this.keyid, number, norm_id);
            });
        },
        reload: function(id, keyid, number, norm_id) {
            this.id = id;
            this.keyid = keyid;
            this.number = number;
            this.norm_id = norm_id;
            return this.model.getPlus(id, number, norm_id);
        },
        render: function(respond) {
            var view;
            view = this;
            respond.name = titleFit(respond.name, 9, 12);
            this.$el.html(Mustache.render(this.tpl, {
                item: respond
            }));
            this.$el.find(".number-value").val(this.number);
            if (this.norm_id) {
                return this.$el.find(".norm").val(this.norm_id);
            }
        }
    });
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/cart/delete/delete-debug", [ "../../../message/message-debug", "./model-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "hammer-debug", "underscore-debug", "backbone-debug", "mustache-debug", "jquery-debug" ], function(require, exports, module) {
    var Message, Model, handler, message, model;
    Message = require("../../../message/message-debug");
    message = new Message();
    handler = function() {};
    Model = require("./model-debug");
    model = new Model("deleteCart");
    model.on("" + model.type + ":success", function() {
        handler();
        history.go(-1);
        return message.open("success", "删除成功", 1300);
    });
    return module.exports = function(id, number, norm_id, callback) {
        if (callback) {
            handler = callback;
        }
        return model.set(id, number, norm_id);
    };
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/buy/cart/delete/model-debug", [ "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.set = function() {
            return this.get.apply(this, arguments);
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/buy/cart/update/model-debug", [ "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../class/model-debug", "../../../serverApi-debug", "../../../cache/cache-debug", "jquery-debug", "hammer-debug", "underscore-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass, http, itemModel;
    http = require("../../../http/http-debug");
    ModelClass = require("../../../class/model-debug");
    itemModel = new ModelClass("item");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.set = function() {
            return this.get.apply(this, arguments);
        };
        Model.prototype.getPlus = function(id) {
            var _this = this;
            itemModel.once("item:success", function(respond) {
                respond.is_update = true;
                if (!respond.norm || respond.norm.length === 0) {
                    respond.has_norm = false;
                } else {
                    respond.has_norm = true;
                }
                return _this.trigger("itemDetail:success", respond, {
                    id: id
                });
            });
            return itemModel.get(id);
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/buy/cart/read/model-debug", [ "../../../class/model-debug", "../../../serverApi-debug", "../../../http/http-debug", "../../../message/message-debug", "../../../plugin/mapping/mapping-debug", "../../../error/error-debug", "../../../remoteLog/log-debug", "../../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/buy/generateOrder/generateOrder-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "../../stateMachine/main-debug", "./view-debug", "../../message/message-debug", "../pay/pay-debug", "../pay/view-debug", "./model-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../serverApi-debug", "../../class/model-debug", "../../cache/cache-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
        var $, Model, View, layout, stateMachine, view;
        $ = require("jquery-debug");
        $("#scroller .content").append('<div id="generate-order"></div>');
        layout = require("../../layout/layout-debug");
        stateMachine = require("../../stateMachine/main-debug");
        View = require("./view-debug");
        Model = require("./model-debug");
        view = new View(new Model("generateOrder"));
        return module.exports = function() {
            view.reload();
            layout({
                type: "location",
                position: "结算"
            });
            return stateMachine.generateOrder.active();
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/generateOrder/view-debug", [ "../../message/message-debug", "../pay/pay-debug", "../../stateMachine/main-debug", "../pay/view-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "jquery-debug", "util-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, makeTime, message, nowTime, pay, verify;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    pay = require("../pay/pay-debug");
    nowTime = function() {
        var h, m, t;
        t = new Date();
        h = t.getHours();
        m = t.getMinutes();
        return {
            h: h,
            m: m,
            spe: h * 100 + m,
            timestamp: t.valueOf()
        };
    };
    verify = function(addressid) {
        if (addressid === "" || addressid === void 0) {
            message.open("tip", "还没有选择收货人地址哦");
            return false;
        }
        return true;
    };
    makeTime = function(h, close_time) {
        var max_m, min_m, now, sel, _h, _i, _j, _m, _ref, _ref1, _results;
        sel = "#generate-order .delivery-time .m";
        now = nowTime();
        h = Math.abs(h);
        if (close_time) {
            makeTime.close_time = close_time;
            for (_h = _i = _ref = now.h, _ref1 = close_time.h + 1; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; _h = _ref <= _ref1 ? ++_i : --_i) {
                $("#generate-order .delivery-time .h").append('<option value="' + _h + '">' + _h + "</option>");
            }
        }
        close_time = makeTime.close_time;
        if (h === now.h) {
            min_m = now.m + 15;
            if (min_m > 60) {
                min_m = min_m - 60;
                $(".other-time .h option").eq(0).remove();
            }
        }
        if (h === close_time.h) {
            max_m = close_time.m;
        }
        if (!min_m) {
            min_m = 0;
        }
        if (!max_m) {
            max_m = 60;
        }
        $(sel).empty();
        _results = [];
        for (_m = _j = min_m; min_m <= max_m ? _j < max_m : _j > max_m; _m = min_m <= max_m ? ++_j : --_j) {
            _results.push($(sel).append('<option value="' + _m + '">' + _m + "</option>"));
        }
        return _results;
    };
    return module.exports = Backbone.View.extend({
        tpl: '<h2>收货人信息</h2>\n<div class="choose-address fruit-ui-arrow-btn" addressid={{address.id}}>\n{{^address.id}}\n<p>选择地址</p>\n{{/address.id}}{{#address.id}}\n<p>{{address.name}}</p>\n<p>\n{{address.detail}}\n{{address.tel}}\n</p>\n{{/address.id}}\n</div><h2>支付方式</h2>\n<ul class="payment fruit-ui-radio">\n<li value="1">支付宝担保交易</li>\n<li class="active" value="2">货到付款</li>\n</ul><h2>送货时间</h2>\n<ul class="delivery-time fruit-ui-radio">\n<li class="active" value="1">立即送货</li>\n<li value="0">\n<span class="tip">其他时间</span>\n<span class="other-time">\n今天\n<select class="h">\n</select>\n时\n<select class="m">\n</select>\n分\n</span>\n</li>\n</ul><h2>订单留言</h2>\n<textarea rows="3" class="order-message" placeholder="如果有特别嘱咐，请在这里留言哦"></textarea><div class="generate fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n提交订单\n</div>',
        el: "#generate-order",
        initialize: function(model) {
            var me, view;
            me = this;
            this.model = model;
            this.model.on("all:success", this.render, this);
            this.model.on("" + this.model.type + ":success", function(respond) {
                var paymentid;
                paymentid = $(me.el).find(".payment .active").attr("value");
                return pay(respond, paymentid);
            });
            this.$el.on("change", ".delivery-time .h", function() {
                return makeTime(Math.abs($(this).val()));
            });
            this.$el.on("tap", ".choose-address", function() {
                return Backbone.Router.prototype.navigate("address", {
                    trigger: true
                });
            });
            view = this.$el;
            model = this.model;
            return this.$el.on("tap", ".generate", function() {
                var addressid, memo, paymentid, postimmediate, posttime, tax_company, wayid;
                if ($(this).hasClass("disabled")) {
                    return false;
                }
                $(this).hasClass("disabled");
                addressid = view.find(".choose-address").attr("addressid");
                wayid = 1;
                posttime = view.find(".delivery-time .h").val() + ":" + view.find(".delivery-time .m").val();
                postimmediate = view.find(".delivery-time .active").attr("value");
                paymentid = view.find(".payment .active").attr("value");
                memo = view.find(".order-message").val();
                if (!memo || memo === "") {
                    memo = " ";
                }
                tax_company = "";
                if (verify(addressid)) {
                    return model.set(addressid, wayid, posttime, postimmediate, paymentid, memo, tax_company);
                }
            });
        },
        reload: function() {
            this.$el.empty();
            return this.model.getAll();
        },
        render: function(respond) {
            var now, tmp, view;
            view = this;
            tmp = respond.time.close_time.split(":");
            this.close_time = {
                h: Math.abs(tmp[0]),
                m: Math.abs(tmp[1])
            };
            this.close_time.spe = this.close_time.h * 100 + this.close_time.m;
            tmp = respond.time.open_time.split(":");
            this.open_time = {
                h: Math.abs(tmp[0]),
                m: Math.abs(tmp[1])
            };
            this.open_time.spe = this.open_time.h * 100 + this.open_time.m;
            now = nowTime();
            if (now.spe < this.open_time.spe) {
                message.open("tip", '<span style="padding:0 10px;">\n好早啊，我们的客服还在睡觉呢，' + this.open_time.h + ":" + this.open_time.m + "开始营业哦~\n</span>", 3e3);
                history.go(-1);
                return false;
            }
            if (now.spe > this.close_time.spe) {
                message.open("tip", '<span style="padding:0 10px;">\n我们的客服已经下班咯，明天' + this.open_time.h + ":" + this.open_time.m + "开始营业~晚安~地球人~\n</span>", 3e3);
                history.go(-1);
                return false;
            }
            this.$el.html(Mustache.render(this.tpl, {
                address: respond.address
            }));
            return makeTime(now.h, this.close_time);
        }
    });
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/buy/pay/pay-debug", [ "../../stateMachine/main-debug", "./view-debug", "jquery-debug", "util-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var $, View, stateMachine, view;
    $ = require("jquery-debug");
    $("#scroller .content").append('<div id="buy-pay"></div>');
    stateMachine = require("../../stateMachine/main-debug");
    View = require("./view-debug");
    view = new View();
    return module.exports = function(respond, paymentid) {
        stateMachine.pay.active();
        return view.reload(respond, paymentid);
    };
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/buy/pay/view-debug", [ "backbone-debug", "mustache-debug" ], function(require, exports, module) {
        var Backbone, Mustache;
        Backbone = require("backbone-debug");
        Mustache = require("mustache-debug");
        return module.exports = Backbone.View.extend({
            tpl: '{{#is_alipay}}\n<h2>\n您已成功提交订单~\n</h2>\n<h2>\n请在营业时间内付款，否则订单将会被自动作废\n</h2><a href="{{url}}&url=/mobile.html#buy/pay/sucess" class="pay-order-btn fruit-ui-btn fruit-ui-btn-success">\n去支付\n<i class="icon-circle-arrow-right"></i>\n</a>\n{{/is_alipay}}{{^is_alipay}}\n<h2>\n您已成功提交订单~美味即将到达~\n</h2><a href="#" class="fruit-ui-btn fruit-ui-btn-success">继续购物</a>\n<a href="#user/orderDetail/{{id}}" class="fruit-ui-btn">查看订单</a>\n{{/is_alipay}}{{#is_pay_success}}\n<h2>\n支付成功~美味即将到达~\n</h2>\n<a href="#" class="fruit-ui-btn fruit-ui-btn-success">继续购物</a>\n{{/is_pay_success}}',
            el: "#buy-pay",
            initialize: function() {},
            reload: function(respond, paymentid) {
                this.respond = respond;
                this.paymentid = paymentid;
                this.paymentid = Math.abs(this.paymentid);
                return this.render();
            },
            render: function() {
                var is_alipay;
                if (this.paymentid === 1) {
                    is_alipay = true;
                }
                if (typeof this.respond !== "object" && typeof this.respond === "string") {
                    this.$el.html(Mustache.render(this.tpl, {
                        is_pay_success: true
                    }));
                    return false;
                }
                return this.$el.html(Mustache.render(this.tpl, {
                    is_alipay: is_alipay,
                    url: this.respond.url,
                    id: this.respond.id
                }));
            }
        });
    });
}).call(this);

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/buy/generateOrder/model-debug", [ "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../serverApi-debug", "../../class/model-debug", "../../cache/cache-debug", "underscore-debug", "jquery-debug", "hammer-debug", "backbone-debug", "mustache-debug" ], function(require, exports, module) {
    var API, Model, ModelClass, addressModel, businessHoursModel, http, _;
    _ = require("underscore-debug");
    http = require("../../http/http-debug");
    API = require("../../serverApi-debug");
    ModelClass = require("../../class/model-debug");
    businessHoursModel = new ModelClass("businessHours");
    addressModel = new ModelClass("getDefaultAddress");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.collect = function(respond) {
            this.collect.len -= 1;
            if (respond.close_time) {
                this.collect.respond.time = respond;
            } else {
                this.collect.respond.address = respond;
            }
            if (this.collect.len === 0) {
                return this.trigger("all:success", this.collect.respond);
            }
        };
        Model.prototype.set = function() {
            return this.get.apply(this, arguments);
        };
        Model.prototype.getAll = function() {
            var _this = this;
            this.collect.len = 2;
            this.collect.respond = {
                time: "",
                address: ""
            };
            this.once("time:success", function(respond) {
                return _this.collect(respond);
            });
            this.once("address:success", function(respond) {
                return _this.collect(respond);
            });
            businessHoursModel.once("businessHours:success", function(respond) {
                return _this.trigger("time:success", respond);
            });
            addressModel.once("getDefaultAddress:success", function(respond) {
                return _this.trigger("address:success", respond);
            });
            addressModel.get();
            return businessHoursModel.get();
        };
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/address/address-debug", [ "./read/read-debug", "../layout/layout-debug", "../layout/nav/nav-debug", "../stateMachine/nav-debug", "../layout/main/main-debug", "../plugin/imgLoad/imgLoad-debug", "./read/view-debug", "./read/model-debug", "../class/model-debug", "../serverApi-debug", "../http/http-debug", "../message/message-debug", "../plugin/mapping/mapping-debug", "../error/error-debug", "../remoteLog/log-debug", "../cache/cache-debug", "../stateMachine/main-debug", "./create/create-debug", "./create/view-debug", "./create/model-debug", "./update/update-debug", "./update/view-debug", "./destroy/destroy-debug", "./destroy/model-debug", "./update/model-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var create, read, update;
    read = require("./read/read-debug");
    create = require("./create/create-debug");
    update = require("./update/update-debug");
    return module.exports = function(action, paramter) {
        switch (action) {
          case "read":
            return read();

          case "create":
            return create();

          case "update":
            return update(paramter);

          case "destroy":
            return destroy(paramter);

          default:
            return read();
        }
    };
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/address/read/read-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="read-address-list"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("readAddressList"));
    return module.exports = function() {
        view.reload();
        stateMachine.readAddressList.active();
        return layout({
            type: "location",
            position: "我的地址列表"
        });
    };
});

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/address/read/view-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
        var $, Backbone, Mustache, layout, _;
        $ = require("hammer-debug");
        Backbone = require("backbone-debug");
        Mustache = require("mustache-debug");
        _ = require("underscore-debug");
        layout = require("../../layout/layout-debug");
        return module.exports = Backbone.View.extend({
            tpl: '{{#show}}\n<ul>\n{{#list}}\n<li value="{{addressid}}">\n<h3>{{receiver}}</h3>\n<h3>{{province}}{{city}}{{district}}{{address}}</h3>\n<h3>{{phone}}</h3>\n</li>\n{{/list}}\n</ul>\n{{/show}}\n<div class="add-address fruit-ui-arrow-btn">\n添加新地址\n</div>',
            el: "#read-address-list",
            initialize: function(model) {
                this.model = model;
                this.model.on("" + this.model.type + ":success", this.render, this);
                this.$el.hammer().on("tap", ".add-address", function() {
                    return Backbone.Router.prototype.navigate("address/create", {
                        trigger: true
                    });
                });
                return this.$el.hammer().on("tap", "ul li", function() {
                    var hash;
                    hash = $(this).val();
                    return Backbone.Router.prototype.navigate("address/update/" + hash, {
                        trigger: true
                    });
                });
            },
            reload: function() {
                return this.model.get();
            },
            transeData: function(data) {
                if (data.province === "990104") {
                    data.province = "四川省";
                }
                if (data.city === "990105") {
                    data.city = "成都市";
                }
                if (data.district === "990106") {
                    return data.district = "电子科技大学清水河校区";
                }
            },
            render: function(respond) {
                _.each(respond, this.transeData);
                return this.$el.html(Mustache.render(this.tpl, {
                    list: respond,
                    show: function() {
                        return respond.length > 0;
                    }()
                }));
            }
        });
    });
}).call(this);

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/address/read/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/address/create/create-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../message/message-debug", "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="create-address"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("createAddress"));
    return module.exports = function() {
        view.render();
        stateMachine.createAddress.active();
        return layout({
            type: "location",
            position: "添加地址"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/address/create/view-debug", [ "../../message/message-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, layout, message, _;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    _ = require("underscore-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    layout = require("../../layout/layout-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{#respond}}\n{{#addressid}}\n<input id="address-id" type="text" value="{{addressid}}" style="display: none"/>\n{{/addressid}}{{#isDelete}}\n<div class="setDefault-btn fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n使用并设为默认收货地址\n</div>\n{{/isDelete}}<input id="uid" type="text" value="{{uid}}" style="display: none"/>\n<h2>收货人姓名</h2>\n<input type="text" id="receiver" class="fruit-ui-input" value="{{receiver}}"/>\n<h2>收获人地址</h2><div class="select-area">\n<select id="province" name="" value="{{province}}">\n<option value="990104">四川省</option>\n</select>\n<select id="city" name="" value="{{city}}">\n<option value="990105">成都市</option>\n</select>\n</div><select id="district" name="" value="district">\n<option value="990106">电子科技大学清水河校区</option>\n</select><input type="text" id="address-detail" class="fruit-ui-input" placeholder="详细地址 本科本科22栋222" value="{{address}}"/><h2>联系电话</h2>\n<input type="text" id="phone" class="fruit-ui-input" value="{{phone}}"/>\n<div class="save-btn fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n保存\n</div>\n{{/respond}}\n{{#isDelete}}\n<div class="delete-btn fruit-ui-btn">\n<i class="icon-minus-sign"></i>\n删除\n</div>\n{{/isDelete}}',
        el: "#create-address",
        initialize: function(model) {
            var me;
            this.model = model;
            me = this;
            this.model.on("createAddress:success", function() {
                message.open("success", "成功保存地址信息");
                return history.go(-1);
            });
            return this.$el.hammer().on("tap", ".save-btn", function() {
                var city, detail, district, phone, province, receiver, uid;
                uid = _.escape(me.$el.find("#uid").val().replace(/\s/g, ""));
                receiver = _.escape(me.$el.find("#receiver").val().replace(/\s/g, ""));
                province = _.escape(me.$el.find("#province").val().replace(/\s/g, ""));
                city = _.escape(me.$el.find("#city").val().replace(/\s/g, ""));
                district = _.escape(me.$el.find("#district").val().replace(/\s/g, ""));
                detail = _.escape(me.$el.find("#address-detail").val().replace(/\s/g, ""));
                phone = _.escape(me.$el.find("#phone").val().replace(/\s/g, ""));
                if (receiver === "") {
                    message.open("tip", "请填写收货人姓名");
                    return;
                }
                if (detail === "") {
                    message.open("tip", "请填写详细地址");
                    return;
                }
                if (phone === "") {
                    message.open("tip", "请填写联系电话");
                    return;
                }
                return me.model.get(uid, receiver, province, city, district, detail, phone);
            });
        },
        render: function() {
            return this.$el.html(Mustache.render(this.tpl, {
                respond: true
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/address/create/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/address/update/update-debug", [ "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "./view-debug", "../../message/message-debug", "../destroy/destroy-debug", "../destroy/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "./model-debug", "../../stateMachine/main-debug", "jquery-debug", "hammer-debug", "util-debug", "iscroll-debug", "backbone-debug", "mustache-debug", "underscore-debug" ], function(require, exports, module) {
    var $, Model, View, layout, stateMachine, view;
    $ = require("jquery-debug");
    layout = require("../../layout/layout-debug");
    $("#scroller .content").append('<div id="update-address"></div>');
    View = require("./view-debug");
    Model = require("./model-debug");
    stateMachine = require("../../stateMachine/main-debug");
    view = new View(new Model("addressDetail"));
    return module.exports = function(paramter) {
        view.reload(paramter);
        stateMachine.updateAddress.active();
        return layout({
            type: "location",
            position: "修改我的地址"
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/dist/address/update/view-debug", [ "../../message/message-debug", "../../layout/layout-debug", "../../layout/nav/nav-debug", "../../stateMachine/nav-debug", "../../layout/main/main-debug", "../../plugin/imgLoad/imgLoad-debug", "../destroy/destroy-debug", "../destroy/model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "hammer-debug", "backbone-debug", "mustache-debug", "underscore-debug", "util-debug", "jquery-debug", "iscroll-debug" ], function(require, exports, module) {
    var $, Backbone, Message, Mustache, destroy, layout, message, _;
    $ = require("hammer-debug");
    Backbone = require("backbone-debug");
    Mustache = require("mustache-debug");
    _ = require("underscore-debug");
    Message = require("../../message/message-debug");
    message = new Message();
    layout = require("../../layout/layout-debug");
    destroy = require("../destroy/destroy-debug");
    return module.exports = Backbone.View.extend({
        tpl: '{{#respond}}\n{{#addressid}}\n<input id="address-id" type="text" value="{{addressid}}" style="display: none"/>\n{{/addressid}}{{#isDelete}}\n<div class="setDefault-btn fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n使用并设为默认收货地址\n</div>\n{{/isDelete}}<input id="uid" type="text" value="{{uid}}" style="display: none"/>\n<h2>收货人姓名</h2>\n<input type="text" id="receiver" class="fruit-ui-input" value="{{receiver}}"/>\n<h2>收获人地址</h2><div class="select-area">\n<select id="province" name="" value="{{province}}">\n<option value="990104">四川省</option>\n</select>\n<select id="city" name="" value="{{city}}">\n<option value="990105">成都市</option>\n</select>\n</div><select id="district" name="" value="district">\n<option value="990106">电子科技大学清水河校区</option>\n</select><input type="text" id="address-detail" class="fruit-ui-input" placeholder="详细地址 本科本科22栋222" value="{{address}}"/><h2>联系电话</h2>\n<input type="text" id="phone" class="fruit-ui-input" value="{{phone}}"/>\n<div class="save-btn fruit-ui-btn fruit-ui-btn-success">\n<i class="icon-ok-sign"></i>\n保存\n</div>\n{{/respond}}\n{{#isDelete}}\n<div class="delete-btn fruit-ui-btn">\n<i class="icon-minus-sign"></i>\n删除\n</div>\n{{/isDelete}}',
        el: "#update-address",
        initialize: function(model) {
            var me;
            this.model = model;
            me = this;
            this.model.on("" + this.model.type + ":success", this.render, this);
            this.model.on("saveAddress:success", function() {
                message.open("success", "成功保存地址信息");
                return history.go(-1);
            });
            this.model.on("setDefaultAddress:success", function() {
                message.open("success", "成功设置默认地址");
                return history.go(-2);
            });
            this.$el.hammer().on("tap", ".save-btn", function() {
                var city, detail, district, id, phone, province, receiver;
                id = me.$el.find("#address-id").val();
                receiver = _.escape(me.$el.find("#receiver").val().replace(/\s/g, ""));
                province = me.$el.find("#province").val();
                city = me.$el.find("#city").val();
                district = me.$el.find("#district").val();
                detail = _.escape(me.$el.find("#address-detail").val().replace(/\s/g, ""));
                phone = _.escape(me.$el.find("#phone").val().replace(/\s/g, ""));
                if (receiver === "") {
                    message.open("tip", "请填写收货人姓名");
                    return;
                }
                if (detail === "") {
                    message.open("tip", "请填写详细地址");
                    return;
                }
                if (phone === "") {
                    message.open("tip", "请填写联系电话");
                    return;
                }
                return me.model.saveAddress(id, receiver, province, city, district, detail, phone);
            });
            this.$el.hammer().on("tap", ".delete-btn", function() {
                destroy(me.$el.find("#address-id").val(), function() {});
                return history.go(-1);
            });
            return this.$el.hammer().on("tap", ".setDefault-btn", function() {
                return me.model.setDefaultAddress(me.$el.find("#address-id").val());
            });
        },
        reload: function(paramter) {
            return this.model.get(paramter);
        },
        render: function(respond) {
            return this.$el.html(Mustache.render(this.tpl, {
                respond: respond,
                isDelete: true
            }));
        }
    });
});

// Generated by CoffeeScript 1.6.1
define("/assets/dist/address/destroy/destroy-debug", [ "./model-debug", "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "jquery-debug", "underscore-debug", "backbone-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Model, model;
    $ = require("jquery-debug");
    Model = require("./model-debug");
    model = new Model("deleteAddress");
    return module.exports = function(paramter, listener) {
        model.get(paramter);
        return model.on("deleteAddress:success", listener);
    };
});

// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/dist/address/destroy/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "underscore-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
    var Model, ModelClass;
    ModelClass = require("../../class/model-debug");
    Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        return Model;
    }(ModelClass);
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.1
(function() {
    var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    define("/assets/dist/address/update/model-debug", [ "../../class/model-debug", "../../serverApi-debug", "../../http/http-debug", "../../message/message-debug", "../../plugin/mapping/mapping-debug", "../../error/error-debug", "../../remoteLog/log-debug", "../../cache/cache-debug", "jquery-debug", "underscore-debug", "backbone-debug", "hammer-debug", "mustache-debug" ], function(require, exports, module) {
        var $, API, Model, ModelClass, http;
        $ = require("jquery-debug");
        ModelClass = require("../../class/model-debug");
        API = require("../../serverApi-debug");
        http = require("../../http/http-debug");
        Model = function(_super) {
            __extends(Model, _super);
            function Model() {
                return Model.__super__.constructor.apply(this, arguments);
            }
            Model.prototype.saveAddress = function() {
                var args, data;
                args = Array.prototype.slice.call(arguments);
                data = {};
                API["saveAddress"].key.forEach(function(el, index) {
                    if (args[index]) {
                        return data[el] = args[index];
                    }
                });
                return http({
                    url: API["saveAddress"].url,
                    data: data,
                    caller: this,
                    namespace: "saveAddress",
                    map: API["saveAddress"].map
                });
            };
            Model.prototype.setDefaultAddress = function() {
                var args, data;
                args = Array.prototype.slice.call(arguments);
                data = {};
                API["setDefaultAddress"].key.forEach(function(el, index) {
                    if (args[index]) {
                        return data[el] = args[index];
                    }
                });
                return http({
                    url: API["setDefaultAddress"].url,
                    data: data,
                    caller: this,
                    namespace: "setDefaultAddress",
                    map: API["setDefaultAddress"].map
                });
            };
            return Model;
        }(ModelClass);
        return module.exports = Model;
    });
}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
    define("/assets/dist/app-debug", [ "./guide/guide-debug", "./guide/view-debug", "./layout/layout-debug", "./layout/nav/nav-debug", "./stateMachine/nav-debug", "./layout/main/main-debug", "./plugin/imgLoad/imgLoad-debug", "./touch/touch-debug", "./plugin/ui/ui-debug", "./plugin/ui/number/number-debug", "./plugin/ui/radio/radio-debug", "./commodity/commodity-debug", "./commodity/hot/hot-debug", "./stateMachine/main-debug", "./commodity/hot/slide/slide-debug", "./commodity/hot/slide/view-debug", "./commodity/hot/slide/model-debug", "./class/model-debug", "./serverApi-debug", "./http/http-debug", "./message/message-debug", "./plugin/mapping/mapping-debug", "./error/error-debug", "./remoteLog/log-debug", "./cache/cache-debug", "./commodity/hot/list/list-debug", "./commodity/hot/list/view-debug", "./plugin/countdown/countdown-debug", "./commodity/hot/list/model-debug", "./commodity/cat/cat-debug", "./commodity/cat/view-debug", "./commodity/cat/model-debug", "./commodity/list/list-debug", "./commodity/list/view-debug", "./plugin/titleFit/titleFit-debug", "./commodity/list/model-debug", "./commodity/item/item-debug", "./commodity/item/view-debug", "./buy/cart/create/create-debug", "./buy/cart/create/model-debug", "./commodity/item/model-debug", "./user/user-debug", "./user/entrance/entrance-debug", "./user/entrance/view-debug", "./user/info/info-debug", "./user/info/view-debug", "./user/info/model-debug", "./user/login/login-debug", "./user/login/view-debug", "./user/login/model-debug", "./user/register/register-debug", "./user/register/view-debug", "./user/register/model-debug", "./user/orderList/orderList-debug", "./user/orderList/view-debug", "./user/orderList/model-debug", "./user/orderDetail/orderDetail-debug", "./user/orderDetail/view-debug", "./user/orderDetail/model-debug", "./buy/buy-debug", "./buy/cart/cart-debug", "./buy/cart/read/read-debug", "./buy/cart/read/view-debug", "./buy/cart/update/update-debug", "./buy/cart/update/view-debug", "./buy/cart/delete/delete-debug", "./buy/cart/delete/model-debug", "./buy/cart/update/model-debug", "./buy/cart/read/model-debug", "./buy/generateOrder/generateOrder-debug", "./buy/generateOrder/view-debug", "./buy/pay/pay-debug", "./buy/pay/view-debug", "./buy/generateOrder/model-debug", "./address/address-debug", "./address/read/read-debug", "./address/read/view-debug", "./address/read/model-debug", "./address/create/create-debug", "./address/create/view-debug", "./address/create/model-debug", "./address/update/update-debug", "./address/update/view-debug", "./address/destroy/destroy-debug", "./address/destroy/model-debug", "./address/update/model-debug", "backbone-debug", "jquery-debug", "hammer-debug", "mustache-debug", "iscroll-debug", "util-debug", "underscore-debug" ], function(require, exports, module) {
        var $, Backbone, address, app, buy, commodity, layout, rootRouter, user;
        Backbone = require("backbone-debug");
        $ = require("jquery-debug");
        require("./guide/guide-debug");
        layout = require("./layout/layout-debug");
        layout();
        require("./touch/touch-debug");
        require("./plugin/ui/ui-debug");
        require("./plugin/imgLoad/imgLoad-debug");
        commodity = require("./commodity/commodity-debug");
        user = require("./user/user-debug");
        buy = require("./buy/buy-debug");
        address = require("./address/address-debug");
        rootRouter = Backbone.Router.extend({
            routes: {
                "(:module)": "index",
                "(:module/:action)": "index",
                "(:module/:action/:paramter)": "index"
            },
            index: function(module, action, paramter) {
                $("#error").hide();
                switch (module) {
                  case "commodity":
                    return commodity(action, paramter);

                  case "user":
                    return user(action, paramter);

                  case "buy":
                    return buy(action, paramter);

                  case "address":
                    return address(action, paramter);

                  default:
                    return commodity(action, paramter);
                }
            }
        });
        app = new rootRouter();
        Backbone.history.start();
        return module.exports = app;
    });
}).call(this);