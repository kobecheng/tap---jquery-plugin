// Generated by CoffeeScript 1.6.2
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function(require, exports, module) {
  var $;

  $ = require("jquery");
  $.fn.tap = function(endCallback) {
    var activeClass, boundMargin, elBound, events, getTarget, getTargetByCoords, moveOut, noScroll, onEnd, onMove, onStart, startTarget, startX, startY, supportTouch;

    startTarget = "";
    startX = "";
    startY = "";
    moveOut = false;
    elBound = "";
    noScroll = true;
    boundMargin = 50;
    activeClass = "tap-active";
    supportTouch = __indexOf.call(document, 'ontouchend') >= 0;
    events = {
      start: supportTouch ? 'touchstart' : 'mousedown',
      move: supportTouch ? 'touchmove' : 'mousemove',
      end: supportTouch ? 'touchend' : 'mouseup'
    };
    getTargetByCoords = function(x, y) {
      var el;

      el = document.elementFromPoint(x, y);
      if (el.nodeType === 3) {
        return el.parentNode;
      } else {
        return el;
      }
    };
    getTarget = function(e) {
      var el, touch;

      el = e.target;
      if (el) {
        if (el.nodeType === 3) {
          return el.parentNode;
        } else {
          return el;
        }
      }
      touch = e.targetTouches[0];
      return getTargetByCoords(touch.clientX, touch.clientY);
    };
    onStart = function(e) {
      var target, touch;

      target = getTarget(e);
      if (!target) {
        return;
      }
      $(target).addClass(activeClass);
      startX = e.clientX;
      startY = e.clientY;
      if (!startX || !startY) {
        touch = e.targetTouches[0];
        startX = e.clientX;
        startY = e.clientY;
      }
      startTarget = target;
      return elBound = noScroll ? target.getBoundingClientRect() : null;
    };
    onMove = function(e) {
      var moveTarget, target, touch, x, y;

      if (!startTarget) {
        return;
      }
      if (noScroll) {
        e.preventDefault();
      }
      x = e.clientX;
      y = e.clientY;
      target = e.target;
      if (!target || !x || !y) {
        touch = e.changedTouches[0];
        if (!x) {
          x = touch.clientX;
        }
        if (!y) {
          y = touch.clientY;
        }
        moveTarget = getTargetByCoords(x, y);
      }
      if (noScroll) {
        if (x > elBound.left - boundMargin && x < elBound.right + boundMargin && y > elBound.top - boundMargin && y < elBound.bottom + boundMargin) {
          moveOut = false;
          return $(target).addClass(activeClass);
        } else {
          moveOut = true;
          return $(target).removeClass(activeClass);
        }
      }
    };
    onEnd = function(e) {
      var target;

      if (!startTarget) {
        return;
      }
      target = e.target;
      $(target).removeClass(activeClass);
      if (!moveOut) {
        return endCallback();
      }
    };
    this.on("click", function(event) {
      event.stopPropagation();
      return event.preventDefault();
    });
    $(this)[0].addEventListener(events.start, onStart, false);
    $(this)[0].addEventListener(events.move, onMove, false);
    return $(this)[0].addEventListener(events.end, onEnd, false);
  };
  return module.exports = $;
});
